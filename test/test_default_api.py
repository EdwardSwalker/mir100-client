# coding: utf-8

"""
    MIR100 Rest Interface

    Automatically converted from v270 pdf  # noqa: E501

    OpenAPI spec version: 2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import mir100_client
from api.default_api import DefaultApi  # noqa: E501
from mir100_client.rest import ApiException


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self):
        self.api = api.default_api.DefaultApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_actions_action_type_get(self):
        """Test case for actions_action_type_get

        Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others  # noqa: E501
        """
        pass

    def test_actions_action_type_post(self):
        """Test case for actions_action_type_post

        Add a new action definition with the specified action_type  # noqa: E501
        """
        pass

    def test_actions_get(self):
        """Test case for actions_get

        Retrieve the list of action definitions  # noqa: E501
        """
        pass

    def test_area_events_action_definitions_action_type_get(self):
        """Test case for area_events_action_definitions_action_type_get

        Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others  # noqa: E501
        """
        pass

    def test_area_events_action_definitions_get(self):
        """Test case for area_events_action_definitions_get

        Retrieve definitions of area actions and their parameters  # noqa: E501
        """
        pass

    def test_area_events_definitions_get(self):
        """Test case for area_events_definitions_get

        Retrieve definitions of areas and their actions  # noqa: E501
        """
        pass

    def test_area_events_get(self):
        """Test case for area_events_get

        Retrieve the list of area events  # noqa: E501
        """
        pass

    def test_area_events_guid_delete(self):
        """Test case for area_events_guid_delete

        Erase the area event with the specified GUID  # noqa: E501
        """
        pass

    def test_area_events_guid_get(self):
        """Test case for area_events_guid_get

        Retrieve the details about the area event with the specified GUID  # noqa: E501
        """
        pass

    def test_area_events_guid_put(self):
        """Test case for area_events_guid_put

        Modify the values of the area event with the specified GUID  # noqa: E501
        """
        pass

    def test_area_events_post(self):
        """Test case for area_events_post

        Add a new area event  # noqa: E501
        """
        pass

    def test_bluetooth_delete(self):
        """Test case for bluetooth_delete

        Disconnect the Bluetooth device  # noqa: E501
        """
        pass

    def test_bluetooth_get(self):
        """Test case for bluetooth_get

        Retrieve the status of the Bluetooth connection  # noqa: E501
        """
        pass

    def test_bluetooth_post(self):
        """Test case for bluetooth_post

        Connect to the Bluetooth device with the given GUID  # noqa: E501
        """
        pass

    def test_bluetooth_put(self):
        """Test case for bluetooth_put

        Modify the outputs of the connected Bluetooth device  # noqa: E501
        """
        pass

    def test_bluetooth_relays_get(self):
        """Test case for bluetooth_relays_get

        Retrieve the list of configured Bluetooth devices  # noqa: E501
        """
        pass

    def test_bluetooth_relays_guid_delete(self):
        """Test case for bluetooth_relays_guid_delete

        Erase the Bluetooth device with the specified GUID  # noqa: E501
        """
        pass

    def test_bluetooth_relays_guid_get(self):
        """Test case for bluetooth_relays_guid_get

        Retrieve the details about the Bluetooth device with the specified GUID  # noqa: E501
        """
        pass

    def test_bluetooth_relays_guid_put(self):
        """Test case for bluetooth_relays_guid_put

        Modify the values of the Bluetooth device with the specified GUID  # noqa: E501
        """
        pass

    def test_bluetooth_relays_post(self):
        """Test case for bluetooth_relays_post

        Add a new Bluetooth device  # noqa: E501
        """
        pass

    def test_bluetooth_scan_get(self):
        """Test case for bluetooth_scan_get

        Start the discovery of Bluetooth devices  # noqa: E501
        """
        pass

    def test_bluetooth_scan_post(self):
        """Test case for bluetooth_scan_post

        Retrieve the list of discovered devices  # noqa: E501
        """
        pass

    def test_cart_calibrations_get(self):
        """Test case for cart_calibrations_get

        Retrieve the list of cart calibrations  # noqa: E501
        """
        pass

    def test_cart_calibrations_guid_delete(self):
        """Test case for cart_calibrations_guid_delete

        Erase the cart calibration with the specified GUID  # noqa: E501
        """
        pass

    def test_cart_calibrations_guid_get(self):
        """Test case for cart_calibrations_guid_get

        Retrieve the details about the cart calibration with the specified GUID  # noqa: E501
        """
        pass

    def test_cart_calibrations_guid_put(self):
        """Test case for cart_calibrations_guid_put

        Modify the values of the cart calibration with the specified GUID  # noqa: E501
        """
        pass

    def test_cart_calibrations_post(self):
        """Test case for cart_calibrations_post

        Add a new cart calibration  # noqa: E501
        """
        pass

    def test_cart_types_get(self):
        """Test case for cart_types_get

        Retrieve the list of cart types  # noqa: E501
        """
        pass

    def test_cart_types_guid_delete(self):
        """Test case for cart_types_guid_delete

        Erase the cart type with the specified GUID  # noqa: E501
        """
        pass

    def test_cart_types_guid_get(self):
        """Test case for cart_types_guid_get

        Retrieve the details about the cart type with the specified GUID  # noqa: E501
        """
        pass

    def test_cart_types_guid_put(self):
        """Test case for cart_types_guid_put

        Modify the values of the cart type with the specified GUID  # noqa: E501
        """
        pass

    def test_cart_types_post(self):
        """Test case for cart_types_post

        Add a new cart type  # noqa: E501
        """
        pass

    def test_carts_get(self):
        """Test case for carts_get

        Retrieve the list of carts  # noqa: E501
        """
        pass

    def test_carts_guid_delete(self):
        """Test case for carts_guid_delete

        Erase the cart with the specified GUID  # noqa: E501
        """
        pass

    def test_carts_guid_get(self):
        """Test case for carts_guid_get

        Retrieve the details about the cart with the specified GUID  # noqa: E501
        """
        pass

    def test_carts_guid_put(self):
        """Test case for carts_guid_put

        Modify the values of the cart with the specified GUID  # noqa: E501
        """
        pass

    def test_carts_post(self):
        """Test case for carts_post

        Add a new cart  # noqa: E501
        """
        pass

    def test_changes_me_delete(self):
        """Test case for changes_me_delete

        Deletes all data owned by the current user or users with lower authority  # noqa: E501
        """
        pass

    def test_changes_me_get(self):
        """Test case for changes_me_get

        Makes a list of all data owned by the current user or users with lower authority  # noqa: E501
        """
        pass

    def test_dashboards_dashboard_id_widgets_get(self):
        """Test case for dashboards_dashboard_id_widgets_get

        Retrieve the list of widgets of the dashboard with the specified dashboard ID  # noqa: E501
        """
        pass

    def test_dashboards_dashboard_id_widgets_guid_delete(self):
        """Test case for dashboards_dashboard_id_widgets_guid_delete

        Erase the widget with the specified GUID from the dashboard with the specified dashboard ID  # noqa: E501
        """
        pass

    def test_dashboards_dashboard_id_widgets_guid_get(self):
        """Test case for dashboards_dashboard_id_widgets_guid_get

        Retrieve the details about the widget with the specified GUID in the dashboard with the specified dashboard ID  # noqa: E501
        """
        pass

    def test_dashboards_dashboard_id_widgets_guid_put(self):
        """Test case for dashboards_dashboard_id_widgets_guid_put

        Modify the values of the widget with the specified GUID in the dashboard with the specified dashboard ID  # noqa: E501
        """
        pass

    def test_dashboards_dashboard_id_widgets_post(self):
        """Test case for dashboards_dashboard_id_widgets_post

        Add a new widget to the dashboard with the specified dashboard ID  # noqa: E501
        """
        pass

    def test_dashboards_get(self):
        """Test case for dashboards_get

        Retrieve the list of dashboards  # noqa: E501
        """
        pass

    def test_dashboards_guid_delete(self):
        """Test case for dashboards_guid_delete

        Erase the dashboard with the specified GUID  # noqa: E501
        """
        pass

    def test_dashboards_guid_get(self):
        """Test case for dashboards_guid_get

        Retrieve the details of the dashboard with the specified GUID  # noqa: E501
        """
        pass

    def test_dashboards_guid_put(self):
        """Test case for dashboards_guid_put

        Modify the values of the dashboard with the specified GUID  # noqa: E501
        """
        pass

    def test_dashboards_post(self):
        """Test case for dashboards_post

        Add a new dashboard  # noqa: E501
        """
        pass

    def test_docking_offsets_get(self):
        """Test case for docking_offsets_get

        Retrieve the list of docking offsets  # noqa: E501
        """
        pass

    def test_docking_offsets_guid_delete(self):
        """Test case for docking_offsets_guid_delete

        Erase the docking offset with the specified GUID  # noqa: E501
        """
        pass

    def test_docking_offsets_guid_get(self):
        """Test case for docking_offsets_guid_get

        Retrieve the details of the docking offset with the specified GUID  # noqa: E501
        """
        pass

    def test_docking_offsets_guid_put(self):
        """Test case for docking_offsets_guid_put

        Modify the values of the docking offset with the specified GUID  # noqa: E501
        """
        pass

    def test_docking_offsets_post(self):
        """Test case for docking_offsets_post

        Add a new docking offset. The only positions that can have docking offsets are Charging stations, V markers and VL markers  # noqa: E501
        """
        pass

    def test_factory_reset_post(self):
        """Test case for factory_reset_post

        Clean and migrate the database. Keep hardware configurations  # noqa: E501
        """
        pass

    def test_hook_brake_get(self):
        """Test case for hook_brake_get

        Retrieve the state of the Hook brake  # noqa: E501
        """
        pass

    def test_hook_brake_put(self):
        """Test case for hook_brake_put

        Activate or release the Hook brake  # noqa: E501
        """
        pass

    def test_hook_gripper_get(self):
        """Test case for hook_gripper_get

        Retrieve the state of the Hook gripper  # noqa: E501
        """
        pass

    def test_hook_gripper_put(self):
        """Test case for hook_gripper_put

        Open or close the Hook gripper  # noqa: E501
        """
        pass

    def test_hook_height_get(self):
        """Test case for hook_height_get

        Retrieve the height of the Hook  # noqa: E501
        """
        pass

    def test_hook_height_put(self):
        """Test case for hook_height_put

        Modify the height of the Hook  # noqa: E501
        """
        pass

    def test_hook_status_get(self):
        """Test case for hook_status_get

        Retrieve the extended status of the Hook  # noqa: E501
        """
        pass

    def test_hw_export_get(self):
        """Test case for hw_export_get

        Download a file containing the hardware configuration of the robot  # noqa: E501
        """
        pass

    def test_hw_import_post(self):
        """Test case for hw_import_post

        Import the hardware configuration contained in the file into the robot  # noqa: E501
        """
        pass

    def test_io_modules_get(self):
        """Test case for io_modules_get

        Retrieve the list of configured IO modules  # noqa: E501
        """
        pass

    def test_io_modules_guid_delete(self):
        """Test case for io_modules_guid_delete

        Erase the IO device with the specified GUID  # noqa: E501
        """
        pass

    def test_io_modules_guid_get(self):
        """Test case for io_modules_guid_get

        Retrieve the details about a IO device with the specified GUID  # noqa: E501
        """
        pass

    def test_io_modules_guid_put(self):
        """Test case for io_modules_guid_put

        Modify the values of the IO device with the specified GUID  # noqa: E501
        """
        pass

    def test_io_modules_guid_status_delete(self):
        """Test case for io_modules_guid_status_delete

        Disconnect from the IO module with the specified GUID  # noqa: E501
        """
        pass

    def test_io_modules_guid_status_get(self):
        """Test case for io_modules_guid_status_get

        Retrieve the status of the connection to the IO module with the specified GUID  # noqa: E501
        """
        pass

    def test_io_modules_guid_status_post(self):
        """Test case for io_modules_guid_status_post

        Connect to theIO module with the specified GUID  # noqa: E501
        """
        pass

    def test_io_modules_guid_status_put(self):
        """Test case for io_modules_guid_status_put

        Modify the outputs of the connected IO module with specified GUID  # noqa: E501
        """
        pass

    def test_io_modules_post(self):
        """Test case for io_modules_post

        Add a new IO module  # noqa: E501
        """
        pass

    def test_log_error_reports_delete(self):
        """Test case for log_error_reports_delete

        Erase ALL the error reports  # noqa: E501
        """
        pass

    def test_log_error_reports_get(self):
        """Test case for log_error_reports_get

        Retrieve the list of error reports  # noqa: E501
        """
        pass

    def test_log_error_reports_id_delete(self):
        """Test case for log_error_reports_id_delete

        Erase the error report with the specified ID  # noqa: E501
        """
        pass

    def test_log_error_reports_id_download_get(self):
        """Test case for log_error_reports_id_download_get

        Download the file containing the error report with the specified ID  # noqa: E501
        """
        pass

    def test_log_error_reports_id_get(self):
        """Test case for log_error_reports_id_get

        Retrieve the details about the error report with the specified ID  # noqa: E501
        """
        pass

    def test_log_error_reports_post(self):
        """Test case for log_error_reports_post

        Generate a new error report. This will record the 30s previous to this call in a file.  # noqa: E501
        """
        pass

    def test_maps_get(self):
        """Test case for maps_get

        Retrieve the list of maps  # noqa: E501
        """
        pass

    def test_maps_guid_delete(self):
        """Test case for maps_guid_delete

        Erase the map with the specified GUID  # noqa: E501
        """
        pass

    def test_maps_guid_get(self):
        """Test case for maps_guid_get

        Retrieve the details about the map with the specified GUID  # noqa: E501
        """
        pass

    def test_maps_guid_put(self):
        """Test case for maps_guid_put

        Modify the values of the map with the specified GUID  # noqa: E501
        """
        pass

    def test_maps_map_id_area_events_get(self):
        """Test case for maps_map_id_area_events_get

        Retrieve the list of area events that belong to the map with the specified map ID  # noqa: E501
        """
        pass

    def test_maps_map_id_path_guides_get(self):
        """Test case for maps_map_id_path_guides_get

        Retrieve the list of path guides that belong to the map with the specified map ID  # noqa: E501
        """
        pass

    def test_maps_map_id_paths_get(self):
        """Test case for maps_map_id_paths_get

        Retrieve the list of paths that belong to the map with the specified map ID  # noqa: E501
        """
        pass

    def test_maps_map_id_positions_get(self):
        """Test case for maps_map_id_positions_get

        Retrieve the list of positions that belong to the map with the specified map ID  # noqa: E501
        """
        pass

    def test_maps_post(self):
        """Test case for maps_post

        Add a new map  # noqa: E501
        """
        pass

    def test_mission_groups_get(self):
        """Test case for mission_groups_get

        Retrieve the list of mission groups  # noqa: E501
        """
        pass

    def test_mission_groups_group_id_missions_get(self):
        """Test case for mission_groups_group_id_missions_get

        Retrieve the list of missions that belong to the group with the specified group ID  # noqa: E501
        """
        pass

    def test_mission_groups_guid_delete(self):
        """Test case for mission_groups_guid_delete

        Erase the mission group with the specified GUID  # noqa: E501
        """
        pass

    def test_mission_groups_guid_get(self):
        """Test case for mission_groups_guid_get

        Retrieve the details about the mission group with the specified GUID  # noqa: E501
        """
        pass

    def test_mission_groups_guid_put(self):
        """Test case for mission_groups_guid_put

        Modify the values of the mission group with the specified GUID  # noqa: E501
        """
        pass

    def test_mission_groups_mission_group_id_actions_get(self):
        """Test case for mission_groups_mission_group_id_actions_get

        Retrieve the list of action definitions from the mission group with the specified mission group ID  # noqa: E501
        """
        pass

    def test_mission_groups_post(self):
        """Test case for mission_groups_post

        Add a new mission group  # noqa: E501
        """
        pass

    def test_mission_queue_delete(self):
        """Test case for mission_queue_delete

        Abort all the pending and executing missions from the mission queue  # noqa: E501
        """
        pass

    def test_mission_queue_get(self):
        """Test case for mission_queue_get

        Retrieve the list of missions in the queue. Finished, failed, pending and executing missions will be displayed here  # noqa: E501
        """
        pass

    def test_mission_queue_id_delete(self):
        """Test case for mission_queue_id_delete

        Abort the mission with the specified ID in the mission queue  # noqa: E501
        """
        pass

    def test_mission_queue_id_get(self):
        """Test case for mission_queue_id_get

        Retrieve the details about the mission with the specified ID in the mission queue  # noqa: E501
        """
        pass

    def test_mission_queue_id_put(self):
        """Test case for mission_queue_id_put

        Modify the values of the mission with the specified ID in the mission queue  # noqa: E501
        """
        pass

    def test_mission_queue_mission_queue_id_actions_get(self):
        """Test case for mission_queue_mission_queue_id_actions_get

        Retrieve the list of actions from the mission with the specified ID in the mission queue  # noqa: E501
        """
        pass

    def test_mission_queue_mission_queue_id_actions_id_get(self):
        """Test case for mission_queue_mission_queue_id_actions_id_get

        Retrieve the details about the action with the specified ID from the mission with the specified ID in the mission queue  # noqa: E501
        """
        pass

    def test_mission_queue_post(self):
        """Test case for mission_queue_post

        Add a new mission to the mission queue. The mission will always go to the end of the queue  # noqa: E501
        """
        pass

    def test_missions_get(self):
        """Test case for missions_get

        Retrieve the list of missions  # noqa: E501
        """
        pass

    def test_missions_guid_definition_get(self):
        """Test case for missions_guid_definition_get

        Retrieve the mission with the specified GUID as an action definition that can be inserted in another mission  # noqa: E501
        """
        pass

    def test_missions_guid_delete(self):
        """Test case for missions_guid_delete

        Erase the mission with the specified GUID  # noqa: E501
        """
        pass

    def test_missions_guid_get(self):
        """Test case for missions_guid_get

        Retrieve the details about the mission with the specified GUID  # noqa: E501
        """
        pass

    def test_missions_guid_put(self):
        """Test case for missions_guid_put

        Modify the values of the mission with the specified GUID  # noqa: E501
        """
        pass

    def test_missions_mission_id_actions_get(self):
        """Test case for missions_mission_id_actions_get

        Retrieve the list of actions that belong to the mission with the specified mission ID  # noqa: E501
        """
        pass

    def test_missions_mission_id_actions_guid_delete(self):
        """Test case for missions_mission_id_actions_guid_delete

        Erase the action with the specified GUID from the mission with the specified mission ID  # noqa: E501
        """
        pass

    def test_missions_mission_id_actions_guid_get(self):
        """Test case for missions_mission_id_actions_guid_get

        Retrieve the details about the action with the specified GUID that belongs to the mission with the specified mission ID  # noqa: E501
        """
        pass

    def test_missions_mission_id_actions_guid_put(self):
        """Test case for missions_mission_id_actions_guid_put

        Modify the values of the action with the specified GUID that belongs to the mission with the specified mission ID  # noqa: E501
        """
        pass

    def test_missions_mission_id_actions_post(self):
        """Test case for missions_mission_id_actions_post

        Add a new action to the mission with the specified mission ID  # noqa: E501
        """
        pass

    def test_missions_post(self):
        """Test case for missions_post

        Add a new mission  # noqa: E501
        """
        pass

    def test_modbus_get(self):
        """Test case for modbus_get

        Retrieve the modbus registers linked to actions  # noqa: E501
        """
        pass

    def test_modbus_id_get(self):
        """Test case for modbus_id_get

        Retrieve the modbus registers linked to an action  # noqa: E501
        """
        pass

    def test_modbus_missions_get(self):
        """Test case for modbus_missions_get

        Retrieve the list of coils that can trigger a mission  # noqa: E501
        """
        pass

    def test_modbus_missions_guid_delete(self):
        """Test case for modbus_missions_guid_delete

        Delete the specified ID on the the modbus mission table  # noqa: E501
        """
        pass

    def test_modbus_missions_guid_get(self):
        """Test case for modbus_missions_guid_get

        Retrieve the details about the mission linked with the coil  # noqa: E501
        """
        pass

    def test_modbus_missions_guid_put(self):
        """Test case for modbus_missions_guid_put

        Modify the values of the modbus mission with the specified ID  # noqa: E501
        """
        pass

    def test_modbus_missions_post(self):
        """Test case for modbus_missions_post

        Create a new link between a coil and a mission  # noqa: E501
        """
        pass

    def test_path_guides_get(self):
        """Test case for path_guides_get

        Retrieve the list of path guides  # noqa: E501
        """
        pass

    def test_path_guides_guid_delete(self):
        """Test case for path_guides_guid_delete

        Erase the path guide with the specified GUID  # noqa: E501
        """
        pass

    def test_path_guides_guid_get(self):
        """Test case for path_guides_guid_get

        Retrieve the path guide with the specified GUID  # noqa: E501
        """
        pass

    def test_path_guides_guid_put(self):
        """Test case for path_guides_guid_put

        Modify the values of the path guide with the specified GUID  # noqa: E501
        """
        pass

    def test_path_guides_path_guide_guid_options_get(self):
        """Test case for path_guides_path_guide_guid_options_get

        Retrieve the list of allowed start/via/goal options for the selected path guide  # noqa: E501
        """
        pass

    def test_path_guides_path_guide_guid_positions_get(self):
        """Test case for path_guides_path_guide_guid_positions_get

        Retrieve the list of positions for the path guide with the specified GUID  # noqa: E501
        """
        pass

    def test_path_guides_path_guide_guid_positions_guid_delete(self):
        """Test case for path_guides_path_guide_guid_positions_guid_delete

        Erase the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501
        """
        pass

    def test_path_guides_path_guide_guid_positions_guid_get(self):
        """Test case for path_guides_path_guide_guid_positions_guid_get

        Retrieve the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501
        """
        pass

    def test_path_guides_path_guide_guid_positions_guid_put(self):
        """Test case for path_guides_path_guide_guid_positions_guid_put

        Modify the values of the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501
        """
        pass

    def test_path_guides_path_guide_guid_positions_post(self):
        """Test case for path_guides_path_guide_guid_positions_post

        Add a new position to the path guide with the specified GUID  # noqa: E501
        """
        pass

    def test_path_guides_positions_get(self):
        """Test case for path_guides_positions_get

        Retrieve the list of positions used for path guides  # noqa: E501
        """
        pass

    def test_path_guides_positions_guid_delete(self):
        """Test case for path_guides_positions_guid_delete

        Erase the path guide position with the specified GUID  # noqa: E501
        """
        pass

    def test_path_guides_positions_guid_get(self):
        """Test case for path_guides_positions_guid_get

        Retrieve the position for path guides with the specified GUID  # noqa: E501
        """
        pass

    def test_path_guides_positions_guid_put(self):
        """Test case for path_guides_positions_guid_put

        Modify the values of the position for path guides with the specified GUID  # noqa: E501
        """
        pass

    def test_path_guides_positions_post(self):
        """Test case for path_guides_positions_post

        Add a new position in a path guide  # noqa: E501
        """
        pass

    def test_path_guides_post(self):
        """Test case for path_guides_post

        Add a new path guide  # noqa: E501
        """
        pass

    def test_path_guides_precalc_get(self):
        """Test case for path_guides_precalc_get

        Retrieve the status of path guides precalculation  # noqa: E501
        """
        pass

    def test_path_guides_precalc_post(self):
        """Test case for path_guides_precalc_post

        Start/stop precalculation of the specified path guide  # noqa: E501
        """
        pass

    def test_paths_get(self):
        """Test case for paths_get

        Retrieve the list of paths  # noqa: E501
        """
        pass

    def test_paths_guid_delete(self):
        """Test case for paths_guid_delete

        Erase the path with the specified GUID  # noqa: E501
        """
        pass

    def test_paths_guid_get(self):
        """Test case for paths_guid_get

        Retrieve the path with the specified GUID  # noqa: E501
        """
        pass

    def test_paths_guid_put(self):
        """Test case for paths_guid_put

        Modify the values of the path with the specified GUID  # noqa: E501
        """
        pass

    def test_paths_post(self):
        """Test case for paths_post

        Add a new path  # noqa: E501
        """
        pass

    def test_permissions_guid_delete(self):
        """Test case for permissions_guid_delete

        Erase the permission with the specified GUID  # noqa: E501
        """
        pass

    def test_permissions_guid_get(self):
        """Test case for permissions_guid_get

        Retrieve the details about the permission with the specified GUID  # noqa: E501
        """
        pass

    def test_permissions_guid_put(self):
        """Test case for permissions_guid_put

        Modify the values of the permission with the specified GUID  # noqa: E501
        """
        pass

    def test_position_transition_lists_get(self):
        """Test case for position_transition_lists_get

        Retrieve the list of position transition lists  # noqa: E501
        """
        pass

    def test_position_transition_lists_guid_delete(self):
        """Test case for position_transition_lists_guid_delete

        Erase the position transition list with the specified GUID  # noqa: E501
        """
        pass

    def test_position_transition_lists_guid_get(self):
        """Test case for position_transition_lists_guid_get

        Retrieve the details about the position transition list with the specified GUID  # noqa: E501
        """
        pass

    def test_position_transition_lists_guid_put(self):
        """Test case for position_transition_lists_guid_put

        Modify the values of the position transition list with the specified GUID  # noqa: E501
        """
        pass

    def test_position_transition_lists_post(self):
        """Test case for position_transition_lists_post

        Add a new position transition list  # noqa: E501
        """
        pass

    def test_position_types_get(self):
        """Test case for position_types_get

        Retrieve a list of possible position types  # noqa: E501
        """
        pass

    def test_position_types_id_get(self):
        """Test case for position_types_id_get

        Retrieve the details about the position type with the specified ID  # noqa: E501
        """
        pass

    def test_positions_get(self):
        """Test case for positions_get

        Retrieve the list of positions  # noqa: E501
        """
        pass

    def test_positions_guid_delete(self):
        """Test case for positions_guid_delete

        Erase the position with the specified GUID  # noqa: E501
        """
        pass

    def test_positions_guid_get(self):
        """Test case for positions_guid_get

        Retrieve the details about the position with the specified GUID  # noqa: E501
        """
        pass

    def test_positions_guid_put(self):
        """Test case for positions_guid_put

        Modify the values of the position with the specified GUID  # noqa: E501
        """
        pass

    def test_positions_parent_guid_helper_positions_get(self):
        """Test case for positions_parent_guid_helper_positions_get

        Retrieve the list of helper positions for the position with the specified parent GUID. Only Charging Stations, V markers, VL markers, Shelf and Trolley positions have helper positions  # noqa: E501
        """
        pass

    def test_positions_pos_id_docking_offsets_get(self):
        """Test case for positions_pos_id_docking_offsets_get

        Retrieve the details of the docking offset of the position with the specified position ID  # noqa: E501
        """
        pass

    def test_positions_post(self):
        """Test case for positions_post

        Add a new position  # noqa: E501
        """
        pass

    def test_registers_get(self):
        """Test case for registers_get

        Retrieve the list of PLC registers from the robot. Registers 1 to 100 are integers and registers 101-200 are float  # noqa: E501
        """
        pass

    def test_registers_id_get(self):
        """Test case for registers_id_get

        Retrieve the value of the PLC register with the specified ID. Registers 1 to 100 are integers and registers 101-200 are float  # noqa: E501
        """
        pass

    def test_registers_id_post(self):
        """Test case for registers_id_post

        Modify the value of the PLC register with the specified ID. Registers 1 to 100 are integers and registers 101-200 are float. Even though this is not a standard use of the POST call it has been included for compatibility purposes  # noqa: E501
        """
        pass

    def test_registers_id_put(self):
        """Test case for registers_id_put

        Modify the value of the PLC register with the specified ID  # noqa: E501
        """
        pass

    def test_remote_support_get(self):
        """Test case for remote_support_get

        Retrieve the status of the remote support connection  # noqa: E501
        """
        pass

    def test_remote_support_log_get(self):
        """Test case for remote_support_log_get

        Retrieve the list with the actions performed by the remote support controller  # noqa: E501
        """
        pass

    def test_remote_support_put(self):
        """Test case for remote_support_put

        Modify the remote support connection timeout  # noqa: E501
        """
        pass

    def test_robots_post(self):
        """Test case for robots_post

        Add information about other robots in the world. This is used by the Fleet manager to avoid robot collisions  # noqa: E501
        """
        pass

    def test_service_book_get(self):
        """Test case for service_book_get

        Retrieve service book entries accessible by user  # noqa: E501
        """
        pass

    def test_service_book_guid_delete(self):
        """Test case for service_book_guid_delete

        Erase the note with the specified GUID  # noqa: E501
        """
        pass

    def test_service_book_guid_get(self):
        """Test case for service_book_guid_get

        Retrieve note with the GUID  # noqa: E501
        """
        pass

    def test_service_book_post(self):
        """Test case for service_book_post

        Add a service book note  # noqa: E501
        """
        pass

    def test_sessions_get(self):
        """Test case for sessions_get

        Retrieve the list of sessions  # noqa: E501
        """
        pass

    def test_sessions_guid_delete(self):
        """Test case for sessions_guid_delete

        Erase the session with the specified GUID  # noqa: E501
        """
        pass

    def test_sessions_guid_export_get(self):
        """Test case for sessions_guid_export_get

        Download a file containing the session with the specified GUID  # noqa: E501
        """
        pass

    def test_sessions_guid_get(self):
        """Test case for sessions_guid_get

        Retrieve the details about the session with the specified GUID  # noqa: E501
        """
        pass

    def test_sessions_guid_put(self):
        """Test case for sessions_guid_put

        Modify the values of the session with the specified GUID  # noqa: E501
        """
        pass

    def test_sessions_import_delete(self):
        """Test case for sessions_import_delete

        Cancel currently running import  # noqa: E501
        """
        pass

    def test_sessions_import_get(self):
        """Test case for sessions_import_get

        Get progress of the running import  # noqa: E501
        """
        pass

    def test_sessions_import_post(self):
        """Test case for sessions_import_post

        Import the session contained in the file  # noqa: E501
        """
        pass

    def test_sessions_post(self):
        """Test case for sessions_post

        Add a new session  # noqa: E501
        """
        pass

    def test_sessions_session_id_maps_get(self):
        """Test case for sessions_session_id_maps_get

        Retrieve the list of maps that belong to the session with the specified session ID  # noqa: E501
        """
        pass

    def test_sessions_session_id_missions_get(self):
        """Test case for sessions_session_id_missions_get

        Retrieve the list of missions that belong to the session with the specified session ID  # noqa: E501
        """
        pass

    def test_sessions_session_id_position_transition_lists_get(self):
        """Test case for sessions_session_id_position_transition_lists_get

        Retrieve the list of position transition lists that belong to the session with the specified session ID  # noqa: E501
        """
        pass

    def test_setting_groups_get(self):
        """Test case for setting_groups_get

        Retrieve a list with the settings groups  # noqa: E501
        """
        pass

    def test_setting_groups_id_get(self):
        """Test case for setting_groups_id_get

        Retrieve the details about the settings group with the specified ID  # noqa: E501
        """
        pass

    def test_setting_groups_settings_group_id_settings_advanced_get(self):
        """Test case for setting_groups_settings_group_id_settings_advanced_get

        Retrieve the list of advanced settings from the settings group with the specified settings group ID  # noqa: E501
        """
        pass

    def test_setting_groups_settings_group_id_settings_get(self):
        """Test case for setting_groups_settings_group_id_settings_get

        Retrieve the list of settings from the settings group with the specified settings group ID  # noqa: E501
        """
        pass

    def test_settings_advanced_get(self):
        """Test case for settings_advanced_get

        Retrieve the list with the advanced settings  # noqa: E501
        """
        pass

    def test_settings_advanced_id_get(self):
        """Test case for settings_advanced_id_get

        Retrieve the details of the advanced setting with the specified ID  # noqa: E501
        """
        pass

    def test_settings_advanced_id_put(self):
        """Test case for settings_advanced_id_put

        Modify the values of the advanced setting with the specified ID  # noqa: E501
        """
        pass

    def test_settings_get(self):
        """Test case for settings_get

        Retrieve a list with the settings  # noqa: E501
        """
        pass

    def test_settings_id_get(self):
        """Test case for settings_id_get

        Retrieve the details of the setting with the specified ID  # noqa: E501
        """
        pass

    def test_settings_id_put(self):
        """Test case for settings_id_put

        Modify the values of the setting with the specified ID  # noqa: E501
        """
        pass

    def test_shelf_types_get(self):
        """Test case for shelf_types_get

        Retrieve the list of shelf types  # noqa: E501
        """
        pass

    def test_shelf_types_guid_delete(self):
        """Test case for shelf_types_guid_delete

        Erase the shelf type with the specified GUID  # noqa: E501
        """
        pass

    def test_shelf_types_guid_get(self):
        """Test case for shelf_types_guid_get

        Retrieve the details about the shelf type with the specified GUID  # noqa: E501
        """
        pass

    def test_shelf_types_guid_put(self):
        """Test case for shelf_types_guid_put

        Modify the values of the shelf type with the specified GUID  # noqa: E501
        """
        pass

    def test_shelf_types_post(self):
        """Test case for shelf_types_post

        Add a new shelf type  # noqa: E501
        """
        pass

    def test_software_backups_get(self):
        """Test case for software_backups_get

        Retrieve the list with all the software backups  # noqa: E501
        """
        pass

    def test_software_backups_guid_delete(self):
        """Test case for software_backups_guid_delete

        Erase the software backup with the specified GUID  # noqa: E501
        """
        pass

    def test_software_backups_guid_get(self):
        """Test case for software_backups_guid_get

        Retrieve the details about the software backup with the specified GUID  # noqa: E501
        """
        pass

    def test_software_backups_guid_post(self):
        """Test case for software_backups_guid_post

        If it exists a software backup with the specified GUID it will restore that backup. Otherwise, it will create a software backup with the specified GUID  # noqa: E501
        """
        pass

    def test_software_backups_post(self):
        """Test case for software_backups_post

        Create a new software backup  # noqa: E501
        """
        pass

    def test_software_lock_get(self):
        """Test case for software_lock_get

        Retrieve the status of the software lock  # noqa: E501
        """
        pass

    def test_software_lock_put(self):
        """Test case for software_lock_put

        Modify the software lock  # noqa: E501
        """
        pass

    def test_software_logs_get(self):
        """Test case for software_logs_get

        Retrieve the list of software upgrade logs  # noqa: E501
        """
        pass

    def test_software_logs_guid_get(self):
        """Test case for software_logs_guid_get

        Retrieve the details about the software upgrade log with the specified GUID  # noqa: E501
        """
        pass

    def test_software_upgrades_get(self):
        """Test case for software_upgrades_get

        Retrieve a list of the software upgrade performed  # noqa: E501
        """
        pass

    def test_software_upgrades_guid_delete(self):
        """Test case for software_upgrades_guid_delete

        Erase the upgrade file with the specified GUID  # noqa: E501
        """
        pass

    def test_software_upgrades_guid_get(self):
        """Test case for software_upgrades_guid_get

        Retrieve the details of the software upgrade with the specified GUID  # noqa: E501
        """
        pass

    def test_software_upgrades_guid_post(self):
        """Test case for software_upgrades_guid_post

        Upgrade to the version of the upgrade file with the specified GUID  # noqa: E501
        """
        pass

    def test_software_upgrades_post(self):
        """Test case for software_upgrades_post

        Upgrade with the provided upgrade file  # noqa: E501
        """
        pass

    def test_sounds_get(self):
        """Test case for sounds_get

        Retrieve the list of sounds  # noqa: E501
        """
        pass

    def test_sounds_guid_delete(self):
        """Test case for sounds_guid_delete

        Erase the sound with the specified GUID  # noqa: E501
        """
        pass

    def test_sounds_guid_get(self):
        """Test case for sounds_guid_get

        Retrieve the details about the sound with the specified GUID  # noqa: E501
        """
        pass

    def test_sounds_guid_put(self):
        """Test case for sounds_guid_put

        Modify the values of the sound with the specified GUID  # noqa: E501
        """
        pass

    def test_sounds_guid_stream_get(self):
        """Test case for sounds_guid_stream_get

        Download the sound file of the sound with the specified GUID  # noqa: E501
        """
        pass

    def test_sounds_post(self):
        """Test case for sounds_post

        Add a new sound  # noqa: E501
        """
        pass

    def test_statistics_distance_get(self):
        """Test case for statistics_distance_get

        Retrieve the list with the distance driven by the robot at different dates and times  # noqa: E501
        """
        pass

    def test_status_get(self):
        """Test case for status_get

        Retrieve the status  # noqa: E501
        """
        pass

    def test_status_put(self):
        """Test case for status_put

        Modify the status  # noqa: E501
        """
        pass

    def test_system_info_get(self):
        """Test case for system_info_get

        Retrieve the information about the system. It contains different information like serial numbers of hardware components, MAC addresses of network cards, etc…  # noqa: E501
        """
        pass

    def test_user_groups_get(self):
        """Test case for user_groups_get

        Retrieve the list of user groups  # noqa: E501
        """
        pass

    def test_user_groups_guid_delete(self):
        """Test case for user_groups_guid_delete

        Erase the user group with the specified GUID  # noqa: E501
        """
        pass

    def test_user_groups_guid_get(self):
        """Test case for user_groups_guid_get

        Retrieve the details about the user group with the specified GUID  # noqa: E501
        """
        pass

    def test_user_groups_guid_put(self):
        """Test case for user_groups_guid_put

        Modify the values of the user group with the specified GUID  # noqa: E501
        """
        pass

    def test_user_groups_post(self):
        """Test case for user_groups_post

        Add a new user group  # noqa: E501
        """
        pass

    def test_user_groups_user_group_guid_permissions_get(self):
        """Test case for user_groups_user_group_guid_permissions_get

        Retrieve the list of permissions of the user group with the specified group GUID  # noqa: E501
        """
        pass

    def test_user_groups_user_group_guid_permissions_post(self):
        """Test case for user_groups_user_group_guid_permissions_post

        Add a new permission to the group with the specified group GUID  # noqa: E501
        """
        pass

    def test_users_auth_delete(self):
        """Test case for users_auth_delete

        Logout user  # noqa: E501
        """
        pass

    def test_users_auth_post(self):
        """Test case for users_auth_post

        Login with user credentials  # noqa: E501
        """
        pass

    def test_users_get(self):
        """Test case for users_get

        Retrieve the list of users  # noqa: E501
        """
        pass

    def test_users_guid_delete(self):
        """Test case for users_guid_delete

        Erase the user with the specified GUID  # noqa: E501
        """
        pass

    def test_users_guid_get(self):
        """Test case for users_guid_get

        Retrieve the details about the user with the specified GUID  # noqa: E501
        """
        pass

    def test_users_guid_put(self):
        """Test case for users_guid_put

        Modify the values of the user with the specified GUID  # noqa: E501
        """
        pass

    def test_users_me_get(self):
        """Test case for users_me_get

        Retrieve the details about the user currently authorized in the API  # noqa: E501
        """
        pass

    def test_users_me_permissions_get(self):
        """Test case for users_me_permissions_get

        Retrieve the permission of the user currently authorized in the API  # noqa: E501
        """
        pass

    def test_users_me_put(self):
        """Test case for users_me_put

        Modify the values of the user currently authorized in the API  # noqa: E501
        """
        pass

    def test_users_post(self):
        """Test case for users_post

        Add a new user  # noqa: E501
        """
        pass

    def test_wifi_connections_get(self):
        """Test case for wifi_connections_get

        Retrieve the list of WiFi networks already configured  # noqa: E501
        """
        pass

    def test_wifi_connections_post(self):
        """Test case for wifi_connections_post

        Add a new WiFi network configuration  # noqa: E501
        """
        pass

    def test_wifi_connections_uuid_delete(self):
        """Test case for wifi_connections_uuid_delete

        Erase the WiFi network configuration with the specified UUID  # noqa: E501
        """
        pass

    def test_wifi_connections_uuid_get(self):
        """Test case for wifi_connections_uuid_get

        Retrieve the details about the WiFi network configuration with the specified UUID  # noqa: E501
        """
        pass

    def test_wifi_connections_uuid_post(self):
        """Test case for wifi_connections_uuid_post

        Connect to the network with the specified UUID  # noqa: E501
        """
        pass

    def test_wifi_get(self):
        """Test case for wifi_get

        Retrieve the URLs to the 3 WiFi related endpoints  # noqa: E501
        """
        pass

    def test_wifi_networks_get(self):
        """Test case for wifi_networks_get

        Retrieve the list of WiFi networks available for the robot to connect  # noqa: E501
        """
        pass

    def test_wifi_networks_guid_get(self):
        """Test case for wifi_networks_guid_get

        Retrieve the details about the WiFi network with the specified GUID  # noqa: E501
        """
        pass

    def test_world_model_get(self):
        """Test case for world_model_get

        Retrieve the information about the needed resources from the robot  # noqa: E501
        """
        pass

    def test_world_model_post(self):
        """Test case for world_model_post

        Upload the world model with the existing robots, resources and positions and their respective locks  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
