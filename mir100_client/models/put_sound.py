# coding: utf-8

"""
    MIR100 Rest Interface

    Automatically converted from v270 pdf  # noqa: E501

    OpenAPI spec version: 2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PutSound(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'note': 'str',
        'sound': 'str',
        'volume': 'int'
    }

    attribute_map = {
        'name': 'name',
        'note': 'note',
        'sound': 'sound',
        'volume': 'volume'
    }

    def __init__(self, name=None, note=None, sound=None, volume=None):  # noqa: E501
        """PutSound - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._note = None
        self._sound = None
        self._volume = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if note is not None:
            self.note = note
        if sound is not None:
            self.sound = sound
        if volume is not None:
            self.volume = volume

    @property
    def name(self):
        """Gets the name of this PutSound.  # noqa: E501

        Min length: 1, Max length: 40  # noqa: E501

        :return: The name of this PutSound.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutSound.

        Min length: 1, Max length: 40  # noqa: E501

        :param name: The name of this PutSound.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def note(self):
        """Gets the note of this PutSound.  # noqa: E501

        Max length: 255  # noqa: E501

        :return: The note of this PutSound.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this PutSound.

        Max length: 255  # noqa: E501

        :param note: The note of this PutSound.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def sound(self):
        """Gets the sound of this PutSound.  # noqa: E501


        :return: The sound of this PutSound.  # noqa: E501
        :rtype: str
        """
        return self._sound

    @sound.setter
    def sound(self, sound):
        """Sets the sound of this PutSound.


        :param sound: The sound of this PutSound.  # noqa: E501
        :type: str
        """

        self._sound = sound

    @property
    def volume(self):
        """Gets the volume of this PutSound.  # noqa: E501


        :return: The volume of this PutSound.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this PutSound.


        :param volume: The volume of this PutSound.  # noqa: E501
        :type: int
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutSound, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutSound):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
