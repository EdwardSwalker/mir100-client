# coding: utf-8

"""
    MIR100 Rest Interface

    Automatically converted from v270 pdf  # noqa: E501

    OpenAPI spec version: 2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PutShelfType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bar_distance': 'float',
        'bar_length': 'float',
        'height': 'float',
        'length': 'float',
        'name': 'str',
        'offset_x': 'float',
        'offset_y': 'float',
        'width': 'float'
    }

    attribute_map = {
        'bar_distance': 'bar_distance',
        'bar_length': 'bar_length',
        'height': 'height',
        'length': 'length',
        'name': 'name',
        'offset_x': 'offset_x',
        'offset_y': 'offset_y',
        'width': 'width'
    }

    def __init__(self, bar_distance=None, bar_length=None, height=None, length=None, name=None, offset_x=None, offset_y=None, width=None):  # noqa: E501
        """PutShelfType - a model defined in Swagger"""  # noqa: E501
        self._bar_distance = None
        self._bar_length = None
        self._height = None
        self._length = None
        self._name = None
        self._offset_x = None
        self._offset_y = None
        self._width = None
        self.discriminator = None
        if bar_distance is not None:
            self.bar_distance = bar_distance
        if bar_length is not None:
            self.bar_length = bar_length
        if height is not None:
            self.height = height
        if length is not None:
            self.length = length
        if name is not None:
            self.name = name
        if offset_x is not None:
            self.offset_x = offset_x
        if offset_y is not None:
            self.offset_y = offset_y
        if width is not None:
            self.width = width

    @property
    def bar_distance(self):
        """Gets the bar_distance of this PutShelfType.  # noqa: E501


        :return: The bar_distance of this PutShelfType.  # noqa: E501
        :rtype: float
        """
        return self._bar_distance

    @bar_distance.setter
    def bar_distance(self, bar_distance):
        """Sets the bar_distance of this PutShelfType.


        :param bar_distance: The bar_distance of this PutShelfType.  # noqa: E501
        :type: float
        """

        self._bar_distance = bar_distance

    @property
    def bar_length(self):
        """Gets the bar_length of this PutShelfType.  # noqa: E501


        :return: The bar_length of this PutShelfType.  # noqa: E501
        :rtype: float
        """
        return self._bar_length

    @bar_length.setter
    def bar_length(self, bar_length):
        """Sets the bar_length of this PutShelfType.


        :param bar_length: The bar_length of this PutShelfType.  # noqa: E501
        :type: float
        """

        self._bar_length = bar_length

    @property
    def height(self):
        """Gets the height of this PutShelfType.  # noqa: E501


        :return: The height of this PutShelfType.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PutShelfType.


        :param height: The height of this PutShelfType.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def length(self):
        """Gets the length of this PutShelfType.  # noqa: E501


        :return: The length of this PutShelfType.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PutShelfType.


        :param length: The length of this PutShelfType.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def name(self):
        """Gets the name of this PutShelfType.  # noqa: E501

        Min length: 1, Max length: 40  # noqa: E501

        :return: The name of this PutShelfType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutShelfType.

        Min length: 1, Max length: 40  # noqa: E501

        :param name: The name of this PutShelfType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def offset_x(self):
        """Gets the offset_x of this PutShelfType.  # noqa: E501


        :return: The offset_x of this PutShelfType.  # noqa: E501
        :rtype: float
        """
        return self._offset_x

    @offset_x.setter
    def offset_x(self, offset_x):
        """Sets the offset_x of this PutShelfType.


        :param offset_x: The offset_x of this PutShelfType.  # noqa: E501
        :type: float
        """

        self._offset_x = offset_x

    @property
    def offset_y(self):
        """Gets the offset_y of this PutShelfType.  # noqa: E501


        :return: The offset_y of this PutShelfType.  # noqa: E501
        :rtype: float
        """
        return self._offset_y

    @offset_y.setter
    def offset_y(self, offset_y):
        """Sets the offset_y of this PutShelfType.


        :param offset_y: The offset_y of this PutShelfType.  # noqa: E501
        :type: float
        """

        self._offset_y = offset_y

    @property
    def width(self):
        """Gets the width of this PutShelfType.  # noqa: E501


        :return: The width of this PutShelfType.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PutShelfType.


        :param width: The width of this PutShelfType.  # noqa: E501
        :type: float
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutShelfType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutShelfType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
