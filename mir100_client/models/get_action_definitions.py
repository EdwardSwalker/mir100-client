# coding: utf-8

"""
    MIR100 Rest Interface

    Automatically converted from v270 pdf  # noqa: E501

    OpenAPI spec version: 2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GetActionDefinitions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'str',
        'description': 'str',
        'descriptions': 'list[object]',
        'help': 'str',
        'mission_group_id': 'str',
        'name': 'str',
        'parameters': 'list[object]'
    }

    attribute_map = {
        'action_type': 'action_type',
        'description': 'description',
        'descriptions': 'descriptions',
        'help': 'help',
        'mission_group_id': 'mission_group_id',
        'name': 'name',
        'parameters': 'parameters'
    }

    def __init__(self, action_type=None, description=None, descriptions=None, help=None, mission_group_id=None, name=None, parameters=None):  # noqa: E501
        """GetActionDefinitions - a model defined in Swagger"""  # noqa: E501
        self._action_type = None
        self._description = None
        self._descriptions = None
        self._help = None
        self._mission_group_id = None
        self._name = None
        self._parameters = None
        self.discriminator = None
        if action_type is not None:
            self.action_type = action_type
        if description is not None:
            self.description = description
        if descriptions is not None:
            self.descriptions = descriptions
        if help is not None:
            self.help = help
        if mission_group_id is not None:
            self.mission_group_id = mission_group_id
        if name is not None:
            self.name = name
        if parameters is not None:
            self.parameters = parameters

    @property
    def action_type(self):
        """Gets the action_type of this GetActionDefinitions.  # noqa: E501


        :return: The action_type of this GetActionDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this GetActionDefinitions.


        :param action_type: The action_type of this GetActionDefinitions.  # noqa: E501
        :type: str
        """

        self._action_type = action_type

    @property
    def description(self):
        """Gets the description of this GetActionDefinitions.  # noqa: E501


        :return: The description of this GetActionDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetActionDefinitions.


        :param description: The description of this GetActionDefinitions.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def descriptions(self):
        """Gets the descriptions of this GetActionDefinitions.  # noqa: E501


        :return: The descriptions of this GetActionDefinitions.  # noqa: E501
        :rtype: list[object]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this GetActionDefinitions.


        :param descriptions: The descriptions of this GetActionDefinitions.  # noqa: E501
        :type: list[object]
        """

        self._descriptions = descriptions

    @property
    def help(self):
        """Gets the help of this GetActionDefinitions.  # noqa: E501


        :return: The help of this GetActionDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """Sets the help of this GetActionDefinitions.


        :param help: The help of this GetActionDefinitions.  # noqa: E501
        :type: str
        """

        self._help = help

    @property
    def mission_group_id(self):
        """Gets the mission_group_id of this GetActionDefinitions.  # noqa: E501


        :return: The mission_group_id of this GetActionDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._mission_group_id

    @mission_group_id.setter
    def mission_group_id(self, mission_group_id):
        """Sets the mission_group_id of this GetActionDefinitions.


        :param mission_group_id: The mission_group_id of this GetActionDefinitions.  # noqa: E501
        :type: str
        """

        self._mission_group_id = mission_group_id

    @property
    def name(self):
        """Gets the name of this GetActionDefinitions.  # noqa: E501


        :return: The name of this GetActionDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetActionDefinitions.


        :param name: The name of this GetActionDefinitions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this GetActionDefinitions.  # noqa: E501


        :return: The parameters of this GetActionDefinitions.  # noqa: E501
        :rtype: list[object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GetActionDefinitions.


        :param parameters: The parameters of this GetActionDefinitions.  # noqa: E501
        :type: list[object]
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetActionDefinitions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetActionDefinitions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
