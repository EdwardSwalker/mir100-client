# coding: utf-8

"""
    MIR100 Rest Interface

    Automatically converted from v270 pdf  # noqa: E501

    OpenAPI spec version: 2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GetMissionQueue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actions': 'str',
        'control_posid': 'str',
        'control_state': 'int',
        'created_by': 'str',
        'created_by_id': 'str',
        'description': 'str',
        'finished': 'datetime',
        'id': 'int',
        'message': 'str',
        'mission': 'str',
        'mission_id': 'str',
        'ordered': 'datetime',
        'parameters': 'list[object]',
        'priority': 'int',
        'started': 'datetime',
        'state': 'str'
    }

    attribute_map = {
        'actions': 'actions',
        'control_posid': 'control_posid',
        'control_state': 'control_state',
        'created_by': 'created_by',
        'created_by_id': 'created_by_id',
        'description': 'description',
        'finished': 'finished',
        'id': 'id',
        'message': 'message',
        'mission': 'mission',
        'mission_id': 'mission_id',
        'ordered': 'ordered',
        'parameters': 'parameters',
        'priority': 'priority',
        'started': 'started',
        'state': 'state'
    }

    def __init__(self, actions=None, control_posid=None, control_state=None, created_by=None, created_by_id=None, description=None, finished=None, id=None, message=None, mission=None, mission_id=None, ordered=None, parameters=None, priority=None, started=None, state=None):  # noqa: E501
        """GetMissionQueue - a model defined in Swagger"""  # noqa: E501
        self._actions = None
        self._control_posid = None
        self._control_state = None
        self._created_by = None
        self._created_by_id = None
        self._description = None
        self._finished = None
        self._id = None
        self._message = None
        self._mission = None
        self._mission_id = None
        self._ordered = None
        self._parameters = None
        self._priority = None
        self._started = None
        self._state = None
        self.discriminator = None
        if actions is not None:
            self.actions = actions
        if control_posid is not None:
            self.control_posid = control_posid
        if control_state is not None:
            self.control_state = control_state
        if created_by is not None:
            self.created_by = created_by
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if description is not None:
            self.description = description
        if finished is not None:
            self.finished = finished
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if mission is not None:
            self.mission = mission
        if mission_id is not None:
            self.mission_id = mission_id
        if ordered is not None:
            self.ordered = ordered
        if parameters is not None:
            self.parameters = parameters
        if priority is not None:
            self.priority = priority
        if started is not None:
            self.started = started
        if state is not None:
            self.state = state

    @property
    def actions(self):
        """Gets the actions of this GetMissionQueue.  # noqa: E501

        The list of parameters this mission queue entry accepts  # noqa: E501

        :return: The actions of this GetMissionQueue.  # noqa: E501
        :rtype: str
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this GetMissionQueue.

        The list of parameters this mission queue entry accepts  # noqa: E501

        :param actions: The actions of this GetMissionQueue.  # noqa: E501
        :type: str
        """

        self._actions = actions

    @property
    def control_posid(self):
        """Gets the control_posid of this GetMissionQueue.  # noqa: E501

        Global id of position used during control states  # noqa: E501

        :return: The control_posid of this GetMissionQueue.  # noqa: E501
        :rtype: str
        """
        return self._control_posid

    @control_posid.setter
    def control_posid(self, control_posid):
        """Sets the control_posid of this GetMissionQueue.

        Global id of position used during control states  # noqa: E501

        :param control_posid: The control_posid of this GetMissionQueue.  # noqa: E501
        :type: str
        """

        self._control_posid = control_posid

    @property
    def control_state(self):
        """Gets the control_state of this GetMissionQueue.  # noqa: E501

        Mission control state. a value above zero indicates that the robot needs an external input in order to continue  # noqa: E501

        :return: The control_state of this GetMissionQueue.  # noqa: E501
        :rtype: int
        """
        return self._control_state

    @control_state.setter
    def control_state(self, control_state):
        """Sets the control_state of this GetMissionQueue.

        Mission control state. a value above zero indicates that the robot needs an external input in order to continue  # noqa: E501

        :param control_state: The control_state of this GetMissionQueue.  # noqa: E501
        :type: int
        """

        self._control_state = control_state

    @property
    def created_by(self):
        """Gets the created_by of this GetMissionQueue.  # noqa: E501

        The url to the description of the type of this element  # noqa: E501

        :return: The created_by of this GetMissionQueue.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetMissionQueue.

        The url to the description of the type of this element  # noqa: E501

        :param created_by: The created_by of this GetMissionQueue.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_by_id(self):
        """Gets the created_by_id of this GetMissionQueue.  # noqa: E501

        The global id of the user who created this entry  # noqa: E501

        :return: The created_by_id of this GetMissionQueue.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this GetMissionQueue.

        The global id of the user who created this entry  # noqa: E501

        :param created_by_id: The created_by_id of this GetMissionQueue.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def description(self):
        """Gets the description of this GetMissionQueue.  # noqa: E501

        Inerited from mission description, when item was queued  # noqa: E501

        :return: The description of this GetMissionQueue.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetMissionQueue.

        Inerited from mission description, when item was queued  # noqa: E501

        :param description: The description of this GetMissionQueue.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def finished(self):
        """Gets the finished of this GetMissionQueue.  # noqa: E501

        The date and time when the mission was finished  # noqa: E501

        :return: The finished of this GetMissionQueue.  # noqa: E501
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this GetMissionQueue.

        The date and time when the mission was finished  # noqa: E501

        :param finished: The finished of this GetMissionQueue.  # noqa: E501
        :type: datetime
        """

        self._finished = finished

    @property
    def id(self):
        """Gets the id of this GetMissionQueue.  # noqa: E501

        The id of the mission queue entry  # noqa: E501

        :return: The id of this GetMissionQueue.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetMissionQueue.

        The id of the mission queue entry  # noqa: E501

        :param id: The id of this GetMissionQueue.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this GetMissionQueue.  # noqa: E501

        The last message produced by the actions in the mission list  # noqa: E501

        :return: The message of this GetMissionQueue.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GetMissionQueue.

        The last message produced by the actions in the mission list  # noqa: E501

        :param message: The message of this GetMissionQueue.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def mission(self):
        """Gets the mission of this GetMissionQueue.  # noqa: E501

        The url to the mission that mission that was executed  # noqa: E501

        :return: The mission of this GetMissionQueue.  # noqa: E501
        :rtype: str
        """
        return self._mission

    @mission.setter
    def mission(self, mission):
        """Sets the mission of this GetMissionQueue.

        The url to the mission that mission that was executed  # noqa: E501

        :param mission: The mission of this GetMissionQueue.  # noqa: E501
        :type: str
        """

        self._mission = mission

    @property
    def mission_id(self):
        """Gets the mission_id of this GetMissionQueue.  # noqa: E501

        The global id of the mission that was executed  # noqa: E501

        :return: The mission_id of this GetMissionQueue.  # noqa: E501
        :rtype: str
        """
        return self._mission_id

    @mission_id.setter
    def mission_id(self, mission_id):
        """Sets the mission_id of this GetMissionQueue.

        The global id of the mission that was executed  # noqa: E501

        :param mission_id: The mission_id of this GetMissionQueue.  # noqa: E501
        :type: str
        """

        self._mission_id = mission_id

    @property
    def ordered(self):
        """Gets the ordered of this GetMissionQueue.  # noqa: E501

        The date end time when the mission was queued  # noqa: E501

        :return: The ordered of this GetMissionQueue.  # noqa: E501
        :rtype: datetime
        """
        return self._ordered

    @ordered.setter
    def ordered(self, ordered):
        """Sets the ordered of this GetMissionQueue.

        The date end time when the mission was queued  # noqa: E501

        :param ordered: The ordered of this GetMissionQueue.  # noqa: E501
        :type: datetime
        """

        self._ordered = ordered

    @property
    def parameters(self):
        """Gets the parameters of this GetMissionQueue.  # noqa: E501


        :return: The parameters of this GetMissionQueue.  # noqa: E501
        :rtype: list[object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GetMissionQueue.


        :param parameters: The parameters of this GetMissionQueue.  # noqa: E501
        :type: list[object]
        """

        self._parameters = parameters

    @property
    def priority(self):
        """Gets the priority of this GetMissionQueue.  # noqa: E501

        The id of the action  # noqa: E501

        :return: The priority of this GetMissionQueue.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this GetMissionQueue.

        The id of the action  # noqa: E501

        :param priority: The priority of this GetMissionQueue.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def started(self):
        """Gets the started of this GetMissionQueue.  # noqa: E501

        The date and time when the missin was started  # noqa: E501

        :return: The started of this GetMissionQueue.  # noqa: E501
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this GetMissionQueue.

        The date and time when the missin was started  # noqa: E501

        :param started: The started of this GetMissionQueue.  # noqa: E501
        :type: datetime
        """

        self._started = started

    @property
    def state(self):
        """Gets the state of this GetMissionQueue.  # noqa: E501

        The end state after the mission was executed  # noqa: E501

        :return: The state of this GetMissionQueue.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetMissionQueue.

        The end state after the mission was executed  # noqa: E501

        :param state: The state of this GetMissionQueue.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetMissionQueue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetMissionQueue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
