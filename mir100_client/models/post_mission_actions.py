# coding: utf-8

"""
    MIR100 Rest Interface

    Automatically converted from v270 pdf  # noqa: E501

    OpenAPI spec version: 2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PostMissionActions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'str',
        'guid': 'str',
        'mission_id': 'str',
        'parameters': 'list[object]',
        'priority': 'int',
        'scope_reference': 'str'
    }

    attribute_map = {
        'action_type': 'action_type',
        'guid': 'guid',
        'mission_id': 'mission_id',
        'parameters': 'parameters',
        'priority': 'priority',
        'scope_reference': 'scope_reference'
    }

    def __init__(self, action_type=None, guid=None, mission_id=None, parameters=None, priority=None, scope_reference=None):  # noqa: E501
        """PostMissionActions - a model defined in Swagger"""  # noqa: E501
        self._action_type = None
        self._guid = None
        self._mission_id = None
        self._parameters = None
        self._priority = None
        self._scope_reference = None
        self.discriminator = None
        self.action_type = action_type
        if guid is not None:
            self.guid = guid
        self.mission_id = mission_id
        self.parameters = parameters
        self.priority = priority
        if scope_reference is not None:
            self.scope_reference = scope_reference

    @property
    def action_type(self):
        """Gets the action_type of this PostMissionActions.  # noqa: E501

        Min length: 1, Max length: 255  # noqa: E501

        :return: The action_type of this PostMissionActions.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this PostMissionActions.

        Min length: 1, Max length: 255  # noqa: E501

        :param action_type: The action_type of this PostMissionActions.  # noqa: E501
        :type: str
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501

        self._action_type = action_type

    @property
    def guid(self):
        """Gets the guid of this PostMissionActions.  # noqa: E501


        :return: The guid of this PostMissionActions.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this PostMissionActions.


        :param guid: The guid of this PostMissionActions.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def mission_id(self):
        """Gets the mission_id of this PostMissionActions.  # noqa: E501


        :return: The mission_id of this PostMissionActions.  # noqa: E501
        :rtype: str
        """
        return self._mission_id

    @mission_id.setter
    def mission_id(self, mission_id):
        """Sets the mission_id of this PostMissionActions.


        :param mission_id: The mission_id of this PostMissionActions.  # noqa: E501
        :type: str
        """
        if mission_id is None:
            raise ValueError("Invalid value for `mission_id`, must not be `None`")  # noqa: E501

        self._mission_id = mission_id

    @property
    def parameters(self):
        """Gets the parameters of this PostMissionActions.  # noqa: E501


        :return: The parameters of this PostMissionActions.  # noqa: E501
        :rtype: list[object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PostMissionActions.


        :param parameters: The parameters of this PostMissionActions.  # noqa: E501
        :type: list[object]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def priority(self):
        """Gets the priority of this PostMissionActions.  # noqa: E501


        :return: The priority of this PostMissionActions.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PostMissionActions.


        :param priority: The priority of this PostMissionActions.  # noqa: E501
        :type: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def scope_reference(self):
        """Gets the scope_reference of this PostMissionActions.  # noqa: E501


        :return: The scope_reference of this PostMissionActions.  # noqa: E501
        :rtype: str
        """
        return self._scope_reference

    @scope_reference.setter
    def scope_reference(self, scope_reference):
        """Sets the scope_reference of this PostMissionActions.


        :param scope_reference: The scope_reference of this PostMissionActions.  # noqa: E501
        :type: str
        """

        self._scope_reference = scope_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostMissionActions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostMissionActions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
