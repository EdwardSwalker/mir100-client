# coding: utf-8

"""
    MIR100 Rest Interface

    Automatically converted from v270 pdf  # noqa: E501

    OpenAPI spec version: 2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PostWifiConnections(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'device': 'str',
        'dns': 'str',
        'gateway': 'str',
        'netmask': 'str',
        'security': 'str',
        'ssid': 'str'
    }

    attribute_map = {
        'address': 'address',
        'device': 'device',
        'dns': 'dns',
        'gateway': 'gateway',
        'netmask': 'netmask',
        'security': 'security',
        'ssid': 'ssid'
    }

    def __init__(self, address=None, device=None, dns=None, gateway=None, netmask=None, security=None, ssid=None):  # noqa: E501
        """PostWifiConnections - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._device = None
        self._dns = None
        self._gateway = None
        self._netmask = None
        self._security = None
        self._ssid = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if device is not None:
            self.device = device
        if dns is not None:
            self.dns = dns
        if gateway is not None:
            self.gateway = gateway
        if netmask is not None:
            self.netmask = netmask
        if security is not None:
            self.security = security
        self.ssid = ssid

    @property
    def address(self):
        """Gets the address of this PostWifiConnections.  # noqa: E501


        :return: The address of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PostWifiConnections.


        :param address: The address of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def device(self):
        """Gets the device of this PostWifiConnections.  # noqa: E501


        :return: The device of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this PostWifiConnections.


        :param device: The device of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def dns(self):
        """Gets the dns of this PostWifiConnections.  # noqa: E501


        :return: The dns of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this PostWifiConnections.


        :param dns: The dns of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._dns = dns

    @property
    def gateway(self):
        """Gets the gateway of this PostWifiConnections.  # noqa: E501


        :return: The gateway of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this PostWifiConnections.


        :param gateway: The gateway of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def netmask(self):
        """Gets the netmask of this PostWifiConnections.  # noqa: E501


        :return: The netmask of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this PostWifiConnections.


        :param netmask: The netmask of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def security(self):
        """Gets the security of this PostWifiConnections.  # noqa: E501


        :return: The security of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this PostWifiConnections.


        :param security: The security of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._security = security

    @property
    def ssid(self):
        """Gets the ssid of this PostWifiConnections.  # noqa: E501


        :return: The ssid of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this PostWifiConnections.


        :param ssid: The ssid of this PostWifiConnections.  # noqa: E501
        :type: str
        """
        if ssid is None:
            raise ValueError("Invalid value for `ssid`, must not be `None`")  # noqa: E501

        self._ssid = ssid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostWifiConnections, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostWifiConnections):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
