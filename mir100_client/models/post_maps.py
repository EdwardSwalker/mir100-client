# coding: utf-8

"""
    MIR100 Rest Interface

    Automatically converted from v270 pdf  # noqa: E501

    OpenAPI spec version: 2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PostMaps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by_id': 'str',
        'guid': 'str',
        'map': 'str',
        'metadata': 'str',
        'name': 'str',
        'one_way_map': 'str',
        'origin_theta': 'float',
        'origin_x': 'float',
        'origin_y': 'float',
        'resolution': 'float',
        'session_id': 'str'
    }

    attribute_map = {
        'created_by_id': 'created_by_id',
        'guid': 'guid',
        'map': 'map',
        'metadata': 'metadata',
        'name': 'name',
        'one_way_map': 'one_way_map',
        'origin_theta': 'origin_theta',
        'origin_x': 'origin_x',
        'origin_y': 'origin_y',
        'resolution': 'resolution',
        'session_id': 'session_id'
    }

    def __init__(self, created_by_id=None, guid=None, map=None, metadata=None, name=None, one_way_map=None, origin_theta=None, origin_x=None, origin_y=None, resolution=None, session_id=None):  # noqa: E501
        """PostMaps - a model defined in Swagger"""  # noqa: E501
        self._created_by_id = None
        self._guid = None
        self._map = None
        self._metadata = None
        self._name = None
        self._one_way_map = None
        self._origin_theta = None
        self._origin_x = None
        self._origin_y = None
        self._resolution = None
        self._session_id = None
        self.discriminator = None
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if guid is not None:
            self.guid = guid
        self.map = map
        self.metadata = metadata
        self.name = name
        if one_way_map is not None:
            self.one_way_map = one_way_map
        self.origin_theta = origin_theta
        self.origin_x = origin_x
        self.origin_y = origin_y
        self.resolution = resolution
        self.session_id = session_id

    @property
    def created_by_id(self):
        """Gets the created_by_id of this PostMaps.  # noqa: E501


        :return: The created_by_id of this PostMaps.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this PostMaps.


        :param created_by_id: The created_by_id of this PostMaps.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def guid(self):
        """Gets the guid of this PostMaps.  # noqa: E501


        :return: The guid of this PostMaps.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this PostMaps.


        :param guid: The guid of this PostMaps.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def map(self):
        """Gets the map of this PostMaps.  # noqa: E501


        :return: The map of this PostMaps.  # noqa: E501
        :rtype: str
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this PostMaps.


        :param map: The map of this PostMaps.  # noqa: E501
        :type: str
        """
        if map is None:
            raise ValueError("Invalid value for `map`, must not be `None`")  # noqa: E501

        self._map = map

    @property
    def metadata(self):
        """Gets the metadata of this PostMaps.  # noqa: E501


        :return: The metadata of this PostMaps.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PostMaps.


        :param metadata: The metadata of this PostMaps.  # noqa: E501
        :type: str
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this PostMaps.  # noqa: E501

        Min length: 1, Max length: 40  # noqa: E501

        :return: The name of this PostMaps.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostMaps.

        Min length: 1, Max length: 40  # noqa: E501

        :param name: The name of this PostMaps.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def one_way_map(self):
        """Gets the one_way_map of this PostMaps.  # noqa: E501


        :return: The one_way_map of this PostMaps.  # noqa: E501
        :rtype: str
        """
        return self._one_way_map

    @one_way_map.setter
    def one_way_map(self, one_way_map):
        """Sets the one_way_map of this PostMaps.


        :param one_way_map: The one_way_map of this PostMaps.  # noqa: E501
        :type: str
        """

        self._one_way_map = one_way_map

    @property
    def origin_theta(self):
        """Gets the origin_theta of this PostMaps.  # noqa: E501


        :return: The origin_theta of this PostMaps.  # noqa: E501
        :rtype: float
        """
        return self._origin_theta

    @origin_theta.setter
    def origin_theta(self, origin_theta):
        """Sets the origin_theta of this PostMaps.


        :param origin_theta: The origin_theta of this PostMaps.  # noqa: E501
        :type: float
        """
        if origin_theta is None:
            raise ValueError("Invalid value for `origin_theta`, must not be `None`")  # noqa: E501

        self._origin_theta = origin_theta

    @property
    def origin_x(self):
        """Gets the origin_x of this PostMaps.  # noqa: E501


        :return: The origin_x of this PostMaps.  # noqa: E501
        :rtype: float
        """
        return self._origin_x

    @origin_x.setter
    def origin_x(self, origin_x):
        """Sets the origin_x of this PostMaps.


        :param origin_x: The origin_x of this PostMaps.  # noqa: E501
        :type: float
        """
        if origin_x is None:
            raise ValueError("Invalid value for `origin_x`, must not be `None`")  # noqa: E501

        self._origin_x = origin_x

    @property
    def origin_y(self):
        """Gets the origin_y of this PostMaps.  # noqa: E501


        :return: The origin_y of this PostMaps.  # noqa: E501
        :rtype: float
        """
        return self._origin_y

    @origin_y.setter
    def origin_y(self, origin_y):
        """Sets the origin_y of this PostMaps.


        :param origin_y: The origin_y of this PostMaps.  # noqa: E501
        :type: float
        """
        if origin_y is None:
            raise ValueError("Invalid value for `origin_y`, must not be `None`")  # noqa: E501

        self._origin_y = origin_y

    @property
    def resolution(self):
        """Gets the resolution of this PostMaps.  # noqa: E501


        :return: The resolution of this PostMaps.  # noqa: E501
        :rtype: float
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this PostMaps.


        :param resolution: The resolution of this PostMaps.  # noqa: E501
        :type: float
        """
        if resolution is None:
            raise ValueError("Invalid value for `resolution`, must not be `None`")  # noqa: E501

        self._resolution = resolution

    @property
    def session_id(self):
        """Gets the session_id of this PostMaps.  # noqa: E501


        :return: The session_id of this PostMaps.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this PostMaps.


        :param session_id: The session_id of this PostMaps.  # noqa: E501
        :type: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostMaps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostMaps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
