# coding: utf-8

"""
    MIR100 Rest Interface

    Automatically converted from v270 pdf  # noqa: E501

    OpenAPI spec version: 2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GetPathGuidesPrecalc(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'fail_count': 'int',
        'message': 'str',
        'path_guide_guid': 'str',
        'success_count': 'int',
        'total_count': 'int'
    }

    attribute_map = {
        'active': 'active',
        'fail_count': 'fail_count',
        'message': 'message',
        'path_guide_guid': 'path_guide_guid',
        'success_count': 'success_count',
        'total_count': 'total_count'
    }

    def __init__(self, active=None, fail_count=None, message=None, path_guide_guid=None, success_count=None, total_count=None):  # noqa: E501
        """GetPathGuidesPrecalc - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._fail_count = None
        self._message = None
        self._path_guide_guid = None
        self._success_count = None
        self._total_count = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if fail_count is not None:
            self.fail_count = fail_count
        if message is not None:
            self.message = message
        if path_guide_guid is not None:
            self.path_guide_guid = path_guide_guid
        if success_count is not None:
            self.success_count = success_count
        if total_count is not None:
            self.total_count = total_count

    @property
    def active(self):
        """Gets the active of this GetPathGuidesPrecalc.  # noqa: E501

        Boolean indicating if a path guide precalculation is in progress  # noqa: E501

        :return: The active of this GetPathGuidesPrecalc.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this GetPathGuidesPrecalc.

        Boolean indicating if a path guide precalculation is in progress  # noqa: E501

        :param active: The active of this GetPathGuidesPrecalc.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def fail_count(self):
        """Gets the fail_count of this GetPathGuidesPrecalc.  # noqa: E501

        The number of paths that was not possible to precalculate  # noqa: E501

        :return: The fail_count of this GetPathGuidesPrecalc.  # noqa: E501
        :rtype: int
        """
        return self._fail_count

    @fail_count.setter
    def fail_count(self, fail_count):
        """Sets the fail_count of this GetPathGuidesPrecalc.

        The number of paths that was not possible to precalculate  # noqa: E501

        :param fail_count: The fail_count of this GetPathGuidesPrecalc.  # noqa: E501
        :type: int
        """

        self._fail_count = fail_count

    @property
    def message(self):
        """Gets the message of this GetPathGuidesPrecalc.  # noqa: E501

        Status message from the precalculation module  # noqa: E501

        :return: The message of this GetPathGuidesPrecalc.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GetPathGuidesPrecalc.

        Status message from the precalculation module  # noqa: E501

        :param message: The message of this GetPathGuidesPrecalc.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def path_guide_guid(self):
        """Gets the path_guide_guid of this GetPathGuidesPrecalc.  # noqa: E501

        The global unique id across robots that identifies the path guide being precalculated  # noqa: E501

        :return: The path_guide_guid of this GetPathGuidesPrecalc.  # noqa: E501
        :rtype: str
        """
        return self._path_guide_guid

    @path_guide_guid.setter
    def path_guide_guid(self, path_guide_guid):
        """Sets the path_guide_guid of this GetPathGuidesPrecalc.

        The global unique id across robots that identifies the path guide being precalculated  # noqa: E501

        :param path_guide_guid: The path_guide_guid of this GetPathGuidesPrecalc.  # noqa: E501
        :type: str
        """

        self._path_guide_guid = path_guide_guid

    @property
    def success_count(self):
        """Gets the success_count of this GetPathGuidesPrecalc.  # noqa: E501

        The number of paths that has been successfully calculated  # noqa: E501

        :return: The success_count of this GetPathGuidesPrecalc.  # noqa: E501
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this GetPathGuidesPrecalc.

        The number of paths that has been successfully calculated  # noqa: E501

        :param success_count: The success_count of this GetPathGuidesPrecalc.  # noqa: E501
        :type: int
        """

        self._success_count = success_count

    @property
    def total_count(self):
        """Gets the total_count of this GetPathGuidesPrecalc.  # noqa: E501

        The number of total paths to calculate  # noqa: E501

        :return: The total_count of this GetPathGuidesPrecalc.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this GetPathGuidesPrecalc.

        The number of total paths to calculate  # noqa: E501

        :param total_count: The total_count of this GetPathGuidesPrecalc.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPathGuidesPrecalc, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPathGuidesPrecalc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
