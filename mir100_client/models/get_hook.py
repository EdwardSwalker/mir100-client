# coding: utf-8

"""
    MIR100 Rest Interface

    Automatically converted from v270 pdf  # noqa: E501

    OpenAPI spec version: 2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from mir100_client.models.brake import Brake  # noqa: F401,E501
from mir100_client.models.gripper import Gripper  # noqa: F401,E501
from mir100_client.models.height import Height  # noqa: F401,E501


class GetHook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'angle': 'float',
        'available': 'bool',
        'brake': 'Brake',
        'gripper': 'Gripper',
        'height': 'Height',
        'qr_marker_name': 'str'
    }

    attribute_map = {
        'angle': 'angle',
        'available': 'available',
        'brake': 'brake',
        'gripper': 'gripper',
        'height': 'height',
        'qr_marker_name': 'qr_marker_name'
    }

    def __init__(self, angle=None, available=None, brake=None, gripper=None, height=None, qr_marker_name=None):  # noqa: E501
        """GetHook - a model defined in Swagger"""  # noqa: E501
        self._angle = None
        self._available = None
        self._brake = None
        self._gripper = None
        self._height = None
        self._qr_marker_name = None
        self.discriminator = None
        if angle is not None:
            self.angle = angle
        if available is not None:
            self.available = available
        if brake is not None:
            self.brake = brake
        if gripper is not None:
            self.gripper = gripper
        if height is not None:
            self.height = height
        if qr_marker_name is not None:
            self.qr_marker_name = qr_marker_name

    @property
    def angle(self):
        """Gets the angle of this GetHook.  # noqa: E501

        The angle of the hook arm  # noqa: E501

        :return: The angle of this GetHook.  # noqa: E501
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this GetHook.

        The angle of the hook arm  # noqa: E501

        :param angle: The angle of this GetHook.  # noqa: E501
        :type: float
        """

        self._angle = angle

    @property
    def available(self):
        """Gets the available of this GetHook.  # noqa: E501

        Whether the hook data is available or not  # noqa: E501

        :return: The available of this GetHook.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this GetHook.

        Whether the hook data is available or not  # noqa: E501

        :param available: The available of this GetHook.  # noqa: E501
        :type: bool
        """

        self._available = available

    @property
    def brake(self):
        """Gets the brake of this GetHook.  # noqa: E501


        :return: The brake of this GetHook.  # noqa: E501
        :rtype: Brake
        """
        return self._brake

    @brake.setter
    def brake(self, brake):
        """Sets the brake of this GetHook.


        :param brake: The brake of this GetHook.  # noqa: E501
        :type: Brake
        """

        self._brake = brake

    @property
    def gripper(self):
        """Gets the gripper of this GetHook.  # noqa: E501


        :return: The gripper of this GetHook.  # noqa: E501
        :rtype: Gripper
        """
        return self._gripper

    @gripper.setter
    def gripper(self, gripper):
        """Sets the gripper of this GetHook.


        :param gripper: The gripper of this GetHook.  # noqa: E501
        :type: Gripper
        """

        self._gripper = gripper

    @property
    def height(self):
        """Gets the height of this GetHook.  # noqa: E501


        :return: The height of this GetHook.  # noqa: E501
        :rtype: Height
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this GetHook.


        :param height: The height of this GetHook.  # noqa: E501
        :type: Height
        """

        self._height = height

    @property
    def qr_marker_name(self):
        """Gets the qr_marker_name of this GetHook.  # noqa: E501

        The name of the last seen qr marker  # noqa: E501

        :return: The qr_marker_name of this GetHook.  # noqa: E501
        :rtype: str
        """
        return self._qr_marker_name

    @qr_marker_name.setter
    def qr_marker_name(self, qr_marker_name):
        """Sets the qr_marker_name of this GetHook.

        The name of the last seen qr marker  # noqa: E501

        :param qr_marker_name: The qr_marker_name of this GetHook.  # noqa: E501
        :type: str
        """

        self._qr_marker_name = qr_marker_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetHook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetHook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
