# coding: utf-8

"""
    MIR100 Rest Interface

    Automatically converted from v270 pdf  # noqa: E501

    OpenAPI spec version: 2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GetPathGuide(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_by_id': 'str',
        'goals_count': 'int',
        'guid': 'str',
        'map_id': 'str',
        'name': 'str',
        'options': 'str',
        'positions': 'str',
        'starts_count': 'int',
        'vias_count': 'int'
    }

    attribute_map = {
        'created_by': 'created_by',
        'created_by_id': 'created_by_id',
        'goals_count': 'goals_count',
        'guid': 'guid',
        'map_id': 'map_id',
        'name': 'name',
        'options': 'options',
        'positions': 'positions',
        'starts_count': 'starts_count',
        'vias_count': 'vias_count'
    }

    def __init__(self, created_by=None, created_by_id=None, goals_count=None, guid=None, map_id=None, name=None, options=None, positions=None, starts_count=None, vias_count=None):  # noqa: E501
        """GetPathGuide - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._created_by_id = None
        self._goals_count = None
        self._guid = None
        self._map_id = None
        self._name = None
        self._options = None
        self._positions = None
        self._starts_count = None
        self._vias_count = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if goals_count is not None:
            self.goals_count = goals_count
        if guid is not None:
            self.guid = guid
        if map_id is not None:
            self.map_id = map_id
        if name is not None:
            self.name = name
        if options is not None:
            self.options = options
        if positions is not None:
            self.positions = positions
        if starts_count is not None:
            self.starts_count = starts_count
        if vias_count is not None:
            self.vias_count = vias_count

    @property
    def created_by(self):
        """Gets the created_by of this GetPathGuide.  # noqa: E501

        The url to the description of the type of this element  # noqa: E501

        :return: The created_by of this GetPathGuide.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetPathGuide.

        The url to the description of the type of this element  # noqa: E501

        :param created_by: The created_by of this GetPathGuide.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_by_id(self):
        """Gets the created_by_id of this GetPathGuide.  # noqa: E501

        The global unique id of the user that created this path guide  # noqa: E501

        :return: The created_by_id of this GetPathGuide.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this GetPathGuide.

        The global unique id of the user that created this path guide  # noqa: E501

        :param created_by_id: The created_by_id of this GetPathGuide.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def goals_count(self):
        """Gets the goals_count of this GetPathGuide.  # noqa: E501

        The number of goal positions in the path guide  # noqa: E501

        :return: The goals_count of this GetPathGuide.  # noqa: E501
        :rtype: int
        """
        return self._goals_count

    @goals_count.setter
    def goals_count(self, goals_count):
        """Sets the goals_count of this GetPathGuide.

        The number of goal positions in the path guide  # noqa: E501

        :param goals_count: The goals_count of this GetPathGuide.  # noqa: E501
        :type: int
        """

        self._goals_count = goals_count

    @property
    def guid(self):
        """Gets the guid of this GetPathGuide.  # noqa: E501

        The global unique id across robots that identifies this path guide  # noqa: E501

        :return: The guid of this GetPathGuide.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this GetPathGuide.

        The global unique id across robots that identifies this path guide  # noqa: E501

        :param guid: The guid of this GetPathGuide.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def map_id(self):
        """Gets the map_id of this GetPathGuide.  # noqa: E501

        The global id of the map this path guide belongs to  # noqa: E501

        :return: The map_id of this GetPathGuide.  # noqa: E501
        :rtype: str
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this GetPathGuide.

        The global id of the map this path guide belongs to  # noqa: E501

        :param map_id: The map_id of this GetPathGuide.  # noqa: E501
        :type: str
        """

        self._map_id = map_id

    @property
    def name(self):
        """Gets the name of this GetPathGuide.  # noqa: E501

        The name of the path guide  # noqa: E501

        :return: The name of this GetPathGuide.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetPathGuide.

        The name of the path guide  # noqa: E501

        :param name: The name of this GetPathGuide.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this GetPathGuide.  # noqa: E501

        The url to the list of position options for this path path  # noqa: E501

        :return: The options of this GetPathGuide.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this GetPathGuide.

        The url to the list of position options for this path path  # noqa: E501

        :param options: The options of this GetPathGuide.  # noqa: E501
        :type: str
        """

        self._options = options

    @property
    def positions(self):
        """Gets the positions of this GetPathGuide.  # noqa: E501

        The url to the list of positions used in this path guide  # noqa: E501

        :return: The positions of this GetPathGuide.  # noqa: E501
        :rtype: str
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this GetPathGuide.

        The url to the list of positions used in this path guide  # noqa: E501

        :param positions: The positions of this GetPathGuide.  # noqa: E501
        :type: str
        """

        self._positions = positions

    @property
    def starts_count(self):
        """Gets the starts_count of this GetPathGuide.  # noqa: E501

        The number of start positions in the path guide  # noqa: E501

        :return: The starts_count of this GetPathGuide.  # noqa: E501
        :rtype: int
        """
        return self._starts_count

    @starts_count.setter
    def starts_count(self, starts_count):
        """Sets the starts_count of this GetPathGuide.

        The number of start positions in the path guide  # noqa: E501

        :param starts_count: The starts_count of this GetPathGuide.  # noqa: E501
        :type: int
        """

        self._starts_count = starts_count

    @property
    def vias_count(self):
        """Gets the vias_count of this GetPathGuide.  # noqa: E501

        The number of via positions in the path guide  # noqa: E501

        :return: The vias_count of this GetPathGuide.  # noqa: E501
        :rtype: int
        """
        return self._vias_count

    @vias_count.setter
    def vias_count(self, vias_count):
        """Sets the vias_count of this GetPathGuide.

        The number of via positions in the path guide  # noqa: E501

        :param vias_count: The vias_count of this GetPathGuide.  # noqa: E501
        :type: int
        """

        self._vias_count = vias_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPathGuide, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPathGuide):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
