# coding: utf-8

"""
    MIR100 Rest Interface

    Automatically converted from v270 pdf  # noqa: E501

    OpenAPI spec version: 2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mir100_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def actions_action_type_get(self, action_type, **kwargs):  # noqa: E501
        """Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_action_type_get(action_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action_type: The action_type to search for (required)
        :param str accept_language: Language header
        :return: GetActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actions_action_type_get_with_http_info(action_type, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_action_type_get_with_http_info(action_type, **kwargs)  # noqa: E501
            return data

    def actions_action_type_get_with_http_info(self, action_type, **kwargs):  # noqa: E501
        """Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_action_type_get_with_http_info(action_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action_type: The action_type to search for (required)
        :param str accept_language: Language header
        :return: GetActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action_type', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_action_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'action_type' is set
        if ('action_type' not in params or
                params['action_type'] is None):
            raise ValueError("Missing the required parameter `action_type` when calling `actions_action_type_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'action_type' in params:
            path_params['action_type'] = params['action_type']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{action_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetActionDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_action_type_post(self, body, action_type, **kwargs):  # noqa: E501
        """Add a new action definition with the specified action_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_action_type_post(body, action_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostActionDefinition body: The details of the action_definition (required)
        :param str action_type: The action_type to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actions_action_type_post_with_http_info(body, action_type, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_action_type_post_with_http_info(body, action_type, **kwargs)  # noqa: E501
            return data

    def actions_action_type_post_with_http_info(self, body, action_type, **kwargs):  # noqa: E501
        """Add a new action definition with the specified action_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_action_type_post_with_http_info(body, action_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostActionDefinition body: The details of the action_definition (required)
        :param str action_type: The action_type to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'action_type', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_action_type_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `actions_action_type_post`")  # noqa: E501
        # verify the required parameter 'action_type' is set
        if ('action_type' not in params or
                params['action_type'] is None):
            raise ValueError("Missing the required parameter `action_type` when calling `actions_action_type_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'action_type' in params:
            path_params['action_type'] = params['action_type']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{action_type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetActionDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of action definitions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetActionDefinitions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.actions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def actions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of action definitions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetActionDefinitions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetActionDefinitions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def area_events_action_definitions_action_type_get(self, action_type, **kwargs):  # noqa: E501
        """Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_action_definitions_action_type_get(action_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action_type: The action_type to search for (required)
        :param str accept_language: Language header
        :return: GetAreaActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.area_events_action_definitions_action_type_get_with_http_info(action_type, **kwargs)  # noqa: E501
        else:
            (data) = self.area_events_action_definitions_action_type_get_with_http_info(action_type, **kwargs)  # noqa: E501
            return data

    def area_events_action_definitions_action_type_get_with_http_info(self, action_type, **kwargs):  # noqa: E501
        """Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_action_definitions_action_type_get_with_http_info(action_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action_type: The action_type to search for (required)
        :param str accept_language: Language header
        :return: GetAreaActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action_type', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method area_events_action_definitions_action_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'action_type' is set
        if ('action_type' not in params or
                params['action_type'] is None):
            raise ValueError("Missing the required parameter `action_type` when calling `area_events_action_definitions_action_type_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'action_type' in params:
            path_params['action_type'] = params['action_type']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/area_events/action_definitions/{action_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAreaActionDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def area_events_action_definitions_get(self, **kwargs):  # noqa: E501
        """Retrieve definitions of area actions and their parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_action_definitions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetAreaActionDefinitions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.area_events_action_definitions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.area_events_action_definitions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def area_events_action_definitions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve definitions of area actions and their parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_action_definitions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetAreaActionDefinitions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method area_events_action_definitions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/area_events/action_definitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAreaActionDefinitions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def area_events_definitions_get(self, **kwargs):  # noqa: E501
        """Retrieve definitions of areas and their actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_definitions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetAreaEventsDefinitions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.area_events_definitions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.area_events_definitions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def area_events_definitions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve definitions of areas and their actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_definitions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetAreaEventsDefinitions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method area_events_definitions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/area_events/definitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAreaEventsDefinitions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def area_events_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of area events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetAreaEvents]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.area_events_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.area_events_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def area_events_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of area events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetAreaEvents]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method area_events_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/area_events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetAreaEvents]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def area_events_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the area event with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.area_events_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.area_events_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def area_events_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the area event with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method area_events_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `area_events_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/area_events/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def area_events_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the area event with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetAreaEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.area_events_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.area_events_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def area_events_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the area event with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetAreaEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method area_events_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `area_events_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/area_events/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAreaEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def area_events_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the area event with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutAreaEvent body: The new values of the area_event (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetAreaEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.area_events_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.area_events_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def area_events_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the area event with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutAreaEvent body: The new values of the area_event (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetAreaEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method area_events_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `area_events_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `area_events_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/area_events/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAreaEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def area_events_post(self, body, **kwargs):  # noqa: E501
        """Add a new area event  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostAreaEvents body: The details of the area_events (required)
        :param str accept_language: Language header
        :return: GetAreaEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.area_events_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.area_events_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def area_events_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new area event  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.area_events_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostAreaEvents body: The details of the area_events (required)
        :param str accept_language: Language header
        :return: GetAreaEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method area_events_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `area_events_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/area_events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAreaEvents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bluetooth_delete(self, **kwargs):  # noqa: E501
        """Disconnect the Bluetooth device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bluetooth_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bluetooth_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def bluetooth_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Disconnect the Bluetooth device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bluetooth_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/bluetooth', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bluetooth_get(self, **kwargs):  # noqa: E501
        """Retrieve the status of the Bluetooth connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetBluetoothStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bluetooth_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bluetooth_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def bluetooth_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the status of the Bluetooth connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetBluetoothStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bluetooth_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/bluetooth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBluetoothStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bluetooth_post(self, body, **kwargs):  # noqa: E501
        """Connect to the Bluetooth device with the given GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostBluetoothStatus body: The details of the bluetooth_status (required)
        :param str accept_language: Language header
        :return: GetBluetoothStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bluetooth_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.bluetooth_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def bluetooth_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Connect to the Bluetooth device with the given GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostBluetoothStatus body: The details of the bluetooth_status (required)
        :param str accept_language: Language header
        :return: GetBluetoothStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bluetooth_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bluetooth_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/bluetooth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBluetoothStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bluetooth_put(self, body, **kwargs):  # noqa: E501
        """Modify the outputs of the connected Bluetooth device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutBluetoothStatus body: The new values of the bluetooth_status (required)
        :param str accept_language: Language header
        :return: GetBluetoothStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bluetooth_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.bluetooth_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def bluetooth_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """Modify the outputs of the connected Bluetooth device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutBluetoothStatus body: The new values of the bluetooth_status (required)
        :param str accept_language: Language header
        :return: GetBluetoothStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bluetooth_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bluetooth_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/bluetooth', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBluetoothStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bluetooth_relays_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of configured Bluetooth devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_relays_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetBluetoothRelays]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bluetooth_relays_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bluetooth_relays_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def bluetooth_relays_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of configured Bluetooth devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_relays_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetBluetoothRelays]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bluetooth_relays_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/bluetooth_relays', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetBluetoothRelays]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bluetooth_relays_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the Bluetooth device with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_relays_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bluetooth_relays_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.bluetooth_relays_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def bluetooth_relays_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the Bluetooth device with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_relays_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bluetooth_relays_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `bluetooth_relays_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/bluetooth_relays/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bluetooth_relays_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the Bluetooth device with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_relays_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetBluetoothRelay
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bluetooth_relays_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.bluetooth_relays_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def bluetooth_relays_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the Bluetooth device with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_relays_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetBluetoothRelay
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bluetooth_relays_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `bluetooth_relays_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/bluetooth_relays/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBluetoothRelay',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bluetooth_relays_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the Bluetooth device with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_relays_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutBluetoothRelay body: The new values of the bluetooth_relay (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetBluetoothRelay
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bluetooth_relays_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.bluetooth_relays_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def bluetooth_relays_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the Bluetooth device with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_relays_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutBluetoothRelay body: The new values of the bluetooth_relay (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetBluetoothRelay
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bluetooth_relays_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bluetooth_relays_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `bluetooth_relays_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/bluetooth_relays/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBluetoothRelay',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bluetooth_relays_post(self, body, **kwargs):  # noqa: E501
        """Add a new Bluetooth device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_relays_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostBluetoothRelays body: The details of the bluetooth_relays (required)
        :param str accept_language: Language header
        :return: GetBluetoothRelays
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bluetooth_relays_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.bluetooth_relays_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def bluetooth_relays_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new Bluetooth device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_relays_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostBluetoothRelays body: The details of the bluetooth_relays (required)
        :param str accept_language: Language header
        :return: GetBluetoothRelays
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bluetooth_relays_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bluetooth_relays_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/bluetooth_relays', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBluetoothRelays',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bluetooth_scan_get(self, **kwargs):  # noqa: E501
        """Start the discovery of Bluetooth devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_scan_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetBluetooth]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bluetooth_scan_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bluetooth_scan_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def bluetooth_scan_get_with_http_info(self, **kwargs):  # noqa: E501
        """Start the discovery of Bluetooth devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_scan_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetBluetooth]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bluetooth_scan_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/bluetooth/scan', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetBluetooth]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bluetooth_scan_post(self, **kwargs):  # noqa: E501
        """Retrieve the list of discovered devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_scan_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetBluetooth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bluetooth_scan_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bluetooth_scan_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def bluetooth_scan_post_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of discovered devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bluetooth_scan_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetBluetooth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bluetooth_scan_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/bluetooth/scan', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBluetooth',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_calibrations_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of cart calibrations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_calibrations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetCartCalibrations]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_calibrations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_calibrations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_calibrations_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of cart calibrations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_calibrations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetCartCalibrations]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_calibrations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/cart_calibrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetCartCalibrations]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_calibrations_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the cart calibration with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_calibrations_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_calibrations_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_calibrations_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def cart_calibrations_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the cart calibration with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_calibrations_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_calibrations_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `cart_calibrations_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/cart_calibrations/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_calibrations_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the cart calibration with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_calibrations_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetCartCalibration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_calibrations_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_calibrations_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def cart_calibrations_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the cart calibration with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_calibrations_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetCartCalibration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_calibrations_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `cart_calibrations_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/cart_calibrations/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCartCalibration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_calibrations_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the cart calibration with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_calibrations_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutCartCalibration body: The new values of the cart_calibration (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetCartCalibration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_calibrations_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_calibrations_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def cart_calibrations_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the cart calibration with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_calibrations_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutCartCalibration body: The new values of the cart_calibration (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetCartCalibration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_calibrations_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cart_calibrations_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `cart_calibrations_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/cart_calibrations/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCartCalibration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_calibrations_post(self, body, **kwargs):  # noqa: E501
        """Add a new cart calibration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_calibrations_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCartCalibrations body: The details of the cart_calibrations (required)
        :param str accept_language: Language header
        :return: GetCartCalibrations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_calibrations_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_calibrations_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cart_calibrations_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new cart calibration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_calibrations_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCartCalibrations body: The details of the cart_calibrations (required)
        :param str accept_language: Language header
        :return: GetCartCalibrations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_calibrations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cart_calibrations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/cart_calibrations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCartCalibrations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_types_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of cart types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_types_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetCartTypes]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_types_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_types_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_types_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of cart types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_types_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetCartTypes]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_types_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/cart_types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetCartTypes]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_types_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the cart type with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_types_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_types_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_types_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def cart_types_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the cart type with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_types_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_types_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `cart_types_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/cart_types/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_types_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the cart type with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_types_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetCartType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_types_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_types_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def cart_types_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the cart type with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_types_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetCartType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_types_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `cart_types_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/cart_types/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCartType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_types_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the cart type with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_types_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutCartType body: The new values of the cart_type (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetCartType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_types_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_types_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def cart_types_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the cart type with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_types_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutCartType body: The new values of the cart_type (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetCartType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_types_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cart_types_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `cart_types_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/cart_types/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCartType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_types_post(self, body, **kwargs):  # noqa: E501
        """Add a new cart type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_types_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCartTypes body: The details of the cart_types (required)
        :param str accept_language: Language header
        :return: GetCartTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_types_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_types_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cart_types_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new cart type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_types_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCartTypes body: The details of the cart_types (required)
        :param str accept_language: Language header
        :return: GetCartTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_types_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cart_types_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/cart_types', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCartTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def carts_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of carts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetCarts]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.carts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.carts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def carts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of carts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetCarts]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method carts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/carts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetCarts]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def carts_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the cart with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carts_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.carts_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.carts_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def carts_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the cart with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carts_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method carts_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `carts_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/carts/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def carts_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the cart with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carts_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetCart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.carts_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.carts_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def carts_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the cart with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carts_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetCart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method carts_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `carts_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/carts/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def carts_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the cart with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carts_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutCart body: The new values of the cart (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetCart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.carts_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.carts_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def carts_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the cart with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carts_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutCart body: The new values of the cart (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetCart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method carts_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `carts_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `carts_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/carts/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def carts_post(self, body, **kwargs):  # noqa: E501
        """Add a new cart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carts_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCarts body: The details of the carts (required)
        :param str accept_language: Language header
        :return: GetCarts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.carts_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.carts_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def carts_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new cart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.carts_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCarts body: The details of the carts (required)
        :param str accept_language: Language header
        :return: GetCarts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method carts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `carts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/carts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCarts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def changes_me_delete(self, **kwargs):  # noqa: E501
        """Deletes all data owned by the current user or users with lower authority  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.changes_me_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.changes_me_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.changes_me_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def changes_me_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes all data owned by the current user or users with lower authority  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.changes_me_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method changes_me_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/changes/me', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def changes_me_get(self, **kwargs):  # noqa: E501
        """Makes a list of all data owned by the current user or users with lower authority  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.changes_me_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetChangesMe
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.changes_me_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.changes_me_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def changes_me_get_with_http_info(self, **kwargs):  # noqa: E501
        """Makes a list of all data owned by the current user or users with lower authority  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.changes_me_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetChangesMe
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method changes_me_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/changes/me', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetChangesMe',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboards_dashboard_id_widgets_get(self, dashboard_id, **kwargs):  # noqa: E501
        """Retrieve the list of widgets of the dashboard with the specified dashboard ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_dashboard_id_widgets_get(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetDashboardWidgets]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboards_dashboard_id_widgets_get_with_http_info(dashboard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboards_dashboard_id_widgets_get_with_http_info(dashboard_id, **kwargs)  # noqa: E501
            return data

    def dashboards_dashboard_id_widgets_get_with_http_info(self, dashboard_id, **kwargs):  # noqa: E501
        """Retrieve the list of widgets of the dashboard with the specified dashboard ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_dashboard_id_widgets_get_with_http_info(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetDashboardWidgets]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_dashboard_id_widgets_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params or
                params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `dashboards_dashboard_id_widgets_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_id}/widgets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetDashboardWidgets]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboards_dashboard_id_widgets_guid_delete(self, dashboard_id, guid, **kwargs):  # noqa: E501
        """Erase the widget with the specified GUID from the dashboard with the specified dashboard ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_dashboard_id_widgets_guid_delete(dashboard_id, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard_id to delete (required)
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboards_dashboard_id_widgets_guid_delete_with_http_info(dashboard_id, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboards_dashboard_id_widgets_guid_delete_with_http_info(dashboard_id, guid, **kwargs)  # noqa: E501
            return data

    def dashboards_dashboard_id_widgets_guid_delete_with_http_info(self, dashboard_id, guid, **kwargs):  # noqa: E501
        """Erase the widget with the specified GUID from the dashboard with the specified dashboard ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_dashboard_id_widgets_guid_delete_with_http_info(dashboard_id, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard_id to delete (required)
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_dashboard_id_widgets_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params or
                params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `dashboards_dashboard_id_widgets_guid_delete`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `dashboards_dashboard_id_widgets_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_id}/widgets/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboards_dashboard_id_widgets_guid_get(self, dashboard_id, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the widget with the specified GUID in the dashboard with the specified dashboard ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_dashboard_id_widgets_guid_get(dashboard_id, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard_id to search for (required)
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetDashboardWidget
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboards_dashboard_id_widgets_guid_get_with_http_info(dashboard_id, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboards_dashboard_id_widgets_guid_get_with_http_info(dashboard_id, guid, **kwargs)  # noqa: E501
            return data

    def dashboards_dashboard_id_widgets_guid_get_with_http_info(self, dashboard_id, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the widget with the specified GUID in the dashboard with the specified dashboard ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_dashboard_id_widgets_guid_get_with_http_info(dashboard_id, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dashboard_id: The dashboard_id to search for (required)
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetDashboardWidget
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_dashboard_id_widgets_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params or
                params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `dashboards_dashboard_id_widgets_guid_get`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `dashboards_dashboard_id_widgets_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_id}/widgets/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDashboardWidget',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboards_dashboard_id_widgets_guid_put(self, body, dashboard_id, guid, **kwargs):  # noqa: E501
        """Modify the values of the widget with the specified GUID in the dashboard with the specified dashboard ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_dashboard_id_widgets_guid_put(body, dashboard_id, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutDashboardWidget body: The new values of the dashboard_widget (required)
        :param str dashboard_id: The dashboard_id to modify (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetDashboardWidget
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboards_dashboard_id_widgets_guid_put_with_http_info(body, dashboard_id, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboards_dashboard_id_widgets_guid_put_with_http_info(body, dashboard_id, guid, **kwargs)  # noqa: E501
            return data

    def dashboards_dashboard_id_widgets_guid_put_with_http_info(self, body, dashboard_id, guid, **kwargs):  # noqa: E501
        """Modify the values of the widget with the specified GUID in the dashboard with the specified dashboard ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_dashboard_id_widgets_guid_put_with_http_info(body, dashboard_id, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutDashboardWidget body: The new values of the dashboard_widget (required)
        :param str dashboard_id: The dashboard_id to modify (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetDashboardWidget
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dashboard_id', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_dashboard_id_widgets_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `dashboards_dashboard_id_widgets_guid_put`")  # noqa: E501
        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params or
                params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `dashboards_dashboard_id_widgets_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `dashboards_dashboard_id_widgets_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_id}/widgets/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDashboardWidget',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboards_dashboard_id_widgets_post(self, body, dashboard_id, **kwargs):  # noqa: E501
        """Add a new widget to the dashboard with the specified dashboard ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_dashboard_id_widgets_post(body, dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostDashboardWidgets body: The details of the dashboard_widgets (required)
        :param str dashboard_id: The dashboard_id to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetDashboardWidgets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboards_dashboard_id_widgets_post_with_http_info(body, dashboard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboards_dashboard_id_widgets_post_with_http_info(body, dashboard_id, **kwargs)  # noqa: E501
            return data

    def dashboards_dashboard_id_widgets_post_with_http_info(self, body, dashboard_id, **kwargs):  # noqa: E501
        """Add a new widget to the dashboard with the specified dashboard ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_dashboard_id_widgets_post_with_http_info(body, dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostDashboardWidgets body: The details of the dashboard_widgets (required)
        :param str dashboard_id: The dashboard_id to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetDashboardWidgets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dashboard_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_dashboard_id_widgets_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `dashboards_dashboard_id_widgets_post`")  # noqa: E501
        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params or
                params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `dashboards_dashboard_id_widgets_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{dashboard_id}/widgets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDashboardWidgets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboards_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of dashboards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetDashboards]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboards_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dashboards_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def dashboards_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of dashboards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetDashboards]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetDashboards]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboards_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the dashboard with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboards_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboards_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def dashboards_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the dashboard with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `dashboards_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboards_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details of the dashboard with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetDashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboards_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboards_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def dashboards_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details of the dashboard with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetDashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `dashboards_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboards_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the dashboard with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutDashboard body: The new values of the dashboard (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetDashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboards_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboards_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def dashboards_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the dashboard with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutDashboard body: The new values of the dashboard (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetDashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `dashboards_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `dashboards_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboards_post(self, body, **kwargs):  # noqa: E501
        """Add a new dashboard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostDashboards body: The details of the dashboards (required)
        :param str accept_language: Language header
        :return: GetDashboards
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboards_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboards_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def dashboards_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new dashboard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboards_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostDashboards body: The details of the dashboards (required)
        :param str accept_language: Language header
        :return: GetDashboards
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboards_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `dashboards_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/dashboards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDashboards',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def docking_offsets_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of docking offsets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.docking_offsets_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetDockingOffsets]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.docking_offsets_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.docking_offsets_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def docking_offsets_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of docking offsets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.docking_offsets_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetDockingOffsets]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method docking_offsets_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/docking_offsets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetDockingOffsets]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def docking_offsets_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the docking offset with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.docking_offsets_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.docking_offsets_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.docking_offsets_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def docking_offsets_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the docking offset with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.docking_offsets_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method docking_offsets_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `docking_offsets_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/docking_offsets/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def docking_offsets_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details of the docking offset with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.docking_offsets_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetDockingOffset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.docking_offsets_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.docking_offsets_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def docking_offsets_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details of the docking offset with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.docking_offsets_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetDockingOffset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method docking_offsets_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `docking_offsets_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/docking_offsets/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDockingOffset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def docking_offsets_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the docking offset with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.docking_offsets_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutDockingOffset body: The new values of the docking_offset (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetDockingOffset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.docking_offsets_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.docking_offsets_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def docking_offsets_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the docking offset with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.docking_offsets_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutDockingOffset body: The new values of the docking_offset (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetDockingOffset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method docking_offsets_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `docking_offsets_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `docking_offsets_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/docking_offsets/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDockingOffset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def docking_offsets_post(self, body, **kwargs):  # noqa: E501
        """Add a new docking offset. The only positions that can have docking offsets are Charging stations, V markers and VL markers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.docking_offsets_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostDockingOffsets body: The details of the docking_offsets (required)
        :param str accept_language: Language header
        :return: GetDockingOffsets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.docking_offsets_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.docking_offsets_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def docking_offsets_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new docking offset. The only positions that can have docking offsets are Charging stations, V markers and VL markers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.docking_offsets_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostDockingOffsets body: The details of the docking_offsets (required)
        :param str accept_language: Language header
        :return: GetDockingOffsets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method docking_offsets_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `docking_offsets_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/docking_offsets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDockingOffsets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def factory_reset_post(self, body, **kwargs):  # noqa: E501
        """Clean and migrate the database. Keep hardware configurations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.factory_reset_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostFactoryReset body: The details of the factory_reset (required)
        :param str accept_language: Language header
        :return: GetFactoryReset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.factory_reset_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.factory_reset_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def factory_reset_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Clean and migrate the database. Keep hardware configurations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.factory_reset_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostFactoryReset body: The details of the factory_reset (required)
        :param str accept_language: Language header
        :return: GetFactoryReset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method factory_reset_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `factory_reset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/factory_reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetFactoryReset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hook_brake_get(self, **kwargs):  # noqa: E501
        """Retrieve the state of the Hook brake  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_brake_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetHookBrake
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hook_brake_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.hook_brake_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def hook_brake_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the state of the Hook brake  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_brake_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetHookBrake
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hook_brake_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/hook/brake', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetHookBrake',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hook_brake_put(self, body, **kwargs):  # noqa: E501
        """Activate or release the Hook brake  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_brake_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutHookBrake body: The new values of the hook_brake (required)
        :param str accept_language: Language header
        :return: GetHookBrake
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hook_brake_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.hook_brake_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def hook_brake_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """Activate or release the Hook brake  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_brake_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutHookBrake body: The new values of the hook_brake (required)
        :param str accept_language: Language header
        :return: GetHookBrake
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hook_brake_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `hook_brake_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/hook/brake', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetHookBrake',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hook_gripper_get(self, **kwargs):  # noqa: E501
        """Retrieve the state of the Hook gripper  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_gripper_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetHookGripper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hook_gripper_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.hook_gripper_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def hook_gripper_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the state of the Hook gripper  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_gripper_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetHookGripper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hook_gripper_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/hook/gripper', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetHookGripper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hook_gripper_put(self, body, **kwargs):  # noqa: E501
        """Open or close the Hook gripper  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_gripper_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutHookGripper body: The new values of the hook_gripper (required)
        :param str accept_language: Language header
        :return: GetHookGripper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hook_gripper_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.hook_gripper_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def hook_gripper_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """Open or close the Hook gripper  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_gripper_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutHookGripper body: The new values of the hook_gripper (required)
        :param str accept_language: Language header
        :return: GetHookGripper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hook_gripper_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `hook_gripper_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/hook/gripper', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetHookGripper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hook_height_get(self, **kwargs):  # noqa: E501
        """Retrieve the height of the Hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_height_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetHookHeight
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hook_height_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.hook_height_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def hook_height_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the height of the Hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_height_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetHookHeight
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hook_height_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/hook/height', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetHookHeight',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hook_height_put(self, body, **kwargs):  # noqa: E501
        """Modify the height of the Hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_height_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutHookHeight body: The new values of the hook_height (required)
        :param str accept_language: Language header
        :return: GetHookHeight
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hook_height_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.hook_height_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def hook_height_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """Modify the height of the Hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_height_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutHookHeight body: The new values of the hook_height (required)
        :param str accept_language: Language header
        :return: GetHookHeight
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hook_height_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `hook_height_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/hook/height', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetHookHeight',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hook_status_get(self, **kwargs):  # noqa: E501
        """Retrieve the extended status of the Hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetHook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hook_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.hook_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def hook_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the extended status of the Hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hook_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetHook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hook_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/hook/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetHook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hw_export_get(self, **kwargs):  # noqa: E501
        """Download a file containing the hardware configuration of the robot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hw_export_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetHwConfigExport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hw_export_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.hw_export_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def hw_export_get_with_http_info(self, **kwargs):  # noqa: E501
        """Download a file containing the hardware configuration of the robot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hw_export_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetHwConfigExport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hw_export_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/hw/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetHwConfigExport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hw_import_post(self, body, **kwargs):  # noqa: E501
        """Import the hardware configuration contained in the file into the robot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hw_import_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostHwConfigImport body: The details of the hw_config_import (required)
        :param str accept_language: Language header
        :return: GetHwConfigImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hw_import_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.hw_import_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def hw_import_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Import the hardware configuration contained in the file into the robot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hw_import_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostHwConfigImport body: The details of the hw_config_import (required)
        :param str accept_language: Language header
        :return: GetHwConfigImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hw_import_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `hw_import_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/hw/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetHwConfigImport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def io_modules_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of configured IO modules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetIoModules]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.io_modules_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.io_modules_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def io_modules_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of configured IO modules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetIoModules]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method io_modules_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/io_modules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetIoModules]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def io_modules_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the IO device with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.io_modules_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.io_modules_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def io_modules_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the IO device with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method io_modules_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `io_modules_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/io_modules/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def io_modules_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about a IO device with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetIoModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.io_modules_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.io_modules_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def io_modules_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about a IO device with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetIoModule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method io_modules_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `io_modules_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/io_modules/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIoModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def io_modules_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the IO device with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutIoModule body: The new values of the io_module (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetIoModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.io_modules_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.io_modules_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def io_modules_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the IO device with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutIoModule body: The new values of the io_module (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetIoModule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method io_modules_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `io_modules_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `io_modules_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/io_modules/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIoModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def io_modules_guid_status_delete(self, guid, **kwargs):  # noqa: E501
        """Disconnect from the IO module with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_status_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.io_modules_guid_status_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.io_modules_guid_status_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def io_modules_guid_status_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Disconnect from the IO module with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_status_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method io_modules_guid_status_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `io_modules_guid_status_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/io_modules/{guid}/status', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def io_modules_guid_status_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the status of the connection to the IO module with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_status_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetIoModuleStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.io_modules_guid_status_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.io_modules_guid_status_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def io_modules_guid_status_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the status of the connection to the IO module with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_status_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetIoModuleStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method io_modules_guid_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `io_modules_guid_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/io_modules/{guid}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIoModuleStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def io_modules_guid_status_post(self, body, guid, **kwargs):  # noqa: E501
        """Connect to theIO module with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_status_post(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: The details of the io_module_status (required)
        :param str guid: The guid to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetIoModuleStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.io_modules_guid_status_post_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.io_modules_guid_status_post_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def io_modules_guid_status_post_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Connect to theIO module with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_status_post_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: The details of the io_module_status (required)
        :param str guid: The guid to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetIoModuleStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method io_modules_guid_status_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `io_modules_guid_status_post`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `io_modules_guid_status_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/io_modules/{guid}/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIoModuleStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def io_modules_guid_status_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the outputs of the connected IO module with specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_status_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutIoModuleStatus body: The new values of the io_module_status (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetIoModuleStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.io_modules_guid_status_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.io_modules_guid_status_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def io_modules_guid_status_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the outputs of the connected IO module with specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_guid_status_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutIoModuleStatus body: The new values of the io_module_status (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetIoModuleStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method io_modules_guid_status_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `io_modules_guid_status_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `io_modules_guid_status_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/io_modules/{guid}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIoModuleStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def io_modules_post(self, body, **kwargs):  # noqa: E501
        """Add a new IO module  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostIoModules body: The details of the io_modules (required)
        :param str accept_language: Language header
        :return: GetIoModules
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.io_modules_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.io_modules_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def io_modules_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new IO module  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.io_modules_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostIoModules body: The details of the io_modules (required)
        :param str accept_language: Language header
        :return: GetIoModules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method io_modules_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `io_modules_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/io_modules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIoModules',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def log_error_reports_delete(self, **kwargs):  # noqa: E501
        """Erase ALL the error reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_error_reports_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.log_error_reports_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.log_error_reports_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def log_error_reports_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Erase ALL the error reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_error_reports_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method log_error_reports_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/log/error_reports', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def log_error_reports_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of error reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_error_reports_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetErrorReports
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.log_error_reports_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.log_error_reports_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def log_error_reports_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of error reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_error_reports_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetErrorReports
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method log_error_reports_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/log/error_reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetErrorReports',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def log_error_reports_id_delete(self, id, **kwargs):  # noqa: E501
        """Erase the error report with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_error_reports_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.log_error_reports_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.log_error_reports_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def log_error_reports_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Erase the error report with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_error_reports_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method log_error_reports_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `log_error_reports_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/log/error_reports/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def log_error_reports_id_download_get(self, id, **kwargs):  # noqa: E501
        """Download the file containing the error report with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_error_reports_id_download_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetErrorReportDownload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.log_error_reports_id_download_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.log_error_reports_id_download_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def log_error_reports_id_download_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Download the file containing the error report with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_error_reports_id_download_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetErrorReportDownload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method log_error_reports_id_download_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `log_error_reports_id_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/log/error_reports/{id}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetErrorReportDownload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def log_error_reports_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieve the details about the error report with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_error_reports_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetErrorReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.log_error_reports_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.log_error_reports_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def log_error_reports_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the details about the error report with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_error_reports_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetErrorReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method log_error_reports_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `log_error_reports_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/log/error_reports/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetErrorReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def log_error_reports_post(self, body, **kwargs):  # noqa: E501
        """Generate a new error report. This will record the 30s previous to this call in a file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_error_reports_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostErrorReports body: The details of the error_reports (required)
        :param str accept_language: Language header
        :return: GetErrorReports
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.log_error_reports_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.log_error_reports_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def log_error_reports_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate a new error report. This will record the 30s previous to this call in a file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_error_reports_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostErrorReports body: The details of the error_reports (required)
        :param str accept_language: Language header
        :return: GetErrorReports
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method log_error_reports_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `log_error_reports_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/log/error_reports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetErrorReports',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of maps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetMaps]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.maps_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def maps_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of maps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetMaps]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/maps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMaps]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the map with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def maps_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the map with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `maps_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/maps/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the map with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def maps_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the map with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `maps_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/maps/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the map with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutMap body: The new values of the map (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def maps_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the map with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutMap body: The new values of the map (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `maps_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `maps_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/maps/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_map_id_area_events_get(self, map_id, **kwargs):  # noqa: E501
        """Retrieve the list of area events that belong to the map with the specified map ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_area_events_get(map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_id: The map_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetMapAreaEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_map_id_area_events_get_with_http_info(map_id, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_map_id_area_events_get_with_http_info(map_id, **kwargs)  # noqa: E501
            return data

    def maps_map_id_area_events_get_with_http_info(self, map_id, **kwargs):  # noqa: E501
        """Retrieve the list of area events that belong to the map with the specified map ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_area_events_get_with_http_info(map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_id: The map_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetMapAreaEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['map_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_map_id_area_events_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'map_id' is set
        if ('map_id' not in params or
                params['map_id'] is None):
            raise ValueError("Missing the required parameter `map_id` when calling `maps_map_id_area_events_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_id' in params:
            path_params['map_id'] = params['map_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/maps/{map_id}/area_events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMapAreaEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_map_id_path_guides_get(self, map_id, **kwargs):  # noqa: E501
        """Retrieve the list of path guides that belong to the map with the specified map ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_path_guides_get(map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_id: The map_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetMapPathGuides]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_map_id_path_guides_get_with_http_info(map_id, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_map_id_path_guides_get_with_http_info(map_id, **kwargs)  # noqa: E501
            return data

    def maps_map_id_path_guides_get_with_http_info(self, map_id, **kwargs):  # noqa: E501
        """Retrieve the list of path guides that belong to the map with the specified map ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_path_guides_get_with_http_info(map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_id: The map_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetMapPathGuides]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['map_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_map_id_path_guides_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'map_id' is set
        if ('map_id' not in params or
                params['map_id'] is None):
            raise ValueError("Missing the required parameter `map_id` when calling `maps_map_id_path_guides_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_id' in params:
            path_params['map_id'] = params['map_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/maps/{map_id}/path_guides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMapPathGuides]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_map_id_paths_get(self, map_id, **kwargs):  # noqa: E501
        """Retrieve the list of paths that belong to the map with the specified map ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_paths_get(map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_id: The map_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetMapPaths]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_map_id_paths_get_with_http_info(map_id, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_map_id_paths_get_with_http_info(map_id, **kwargs)  # noqa: E501
            return data

    def maps_map_id_paths_get_with_http_info(self, map_id, **kwargs):  # noqa: E501
        """Retrieve the list of paths that belong to the map with the specified map ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_paths_get_with_http_info(map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_id: The map_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetMapPaths]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['map_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_map_id_paths_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'map_id' is set
        if ('map_id' not in params or
                params['map_id'] is None):
            raise ValueError("Missing the required parameter `map_id` when calling `maps_map_id_paths_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_id' in params:
            path_params['map_id'] = params['map_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/maps/{map_id}/paths', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMapPaths]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_map_id_positions_get(self, map_id, **kwargs):  # noqa: E501
        """Retrieve the list of positions that belong to the map with the specified map ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_positions_get(map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_id: The map_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetMapPositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_map_id_positions_get_with_http_info(map_id, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_map_id_positions_get_with_http_info(map_id, **kwargs)  # noqa: E501
            return data

    def maps_map_id_positions_get_with_http_info(self, map_id, **kwargs):  # noqa: E501
        """Retrieve the list of positions that belong to the map with the specified map ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_positions_get_with_http_info(map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str map_id: The map_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetMapPositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['map_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_map_id_positions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'map_id' is set
        if ('map_id' not in params or
                params['map_id'] is None):
            raise ValueError("Missing the required parameter `map_id` when calling `maps_map_id_positions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_id' in params:
            path_params['map_id'] = params['map_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/maps/{map_id}/positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMapPositions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_post(self, body, **kwargs):  # noqa: E501
        """Add a new map  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostMaps body: The details of the maps (required)
        :param str accept_language: Language header
        :return: GetMaps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def maps_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new map  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostMaps body: The details of the maps (required)
        :param str accept_language: Language header
        :return: GetMaps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `maps_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/maps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMaps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_groups_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of mission groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetMissionGroups]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_groups_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mission_groups_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def mission_groups_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of mission groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetMissionGroups]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_groups_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMissionGroups]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_groups_group_id_missions_get(self, group_id, **kwargs):  # noqa: E501
        """Retrieve the list of missions that belong to the group with the specified group ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_group_id_missions_get(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The group_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetGroupMissions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_groups_group_id_missions_get_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_groups_group_id_missions_get_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def mission_groups_group_id_missions_get_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Retrieve the list of missions that belong to the group with the specified group ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_group_id_missions_get_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The group_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetGroupMissions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_groups_group_id_missions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `mission_groups_group_id_missions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_groups/{group_id}/missions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetGroupMissions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_groups_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the mission group with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_groups_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_groups_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def mission_groups_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the mission group with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_groups_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `mission_groups_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_groups/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_groups_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the mission group with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetMissionGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_groups_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_groups_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def mission_groups_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the mission group with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetMissionGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_groups_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `mission_groups_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_groups/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_groups_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the mission group with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutMissionGroup body: The new values of the mission_group (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetMissionGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_groups_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_groups_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def mission_groups_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the mission group with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutMissionGroup body: The new values of the mission_group (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetMissionGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_groups_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `mission_groups_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `mission_groups_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_groups/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_groups_mission_group_id_actions_get(self, mission_group_id, **kwargs):  # noqa: E501
        """Retrieve the list of action definitions from the mission group with the specified mission group ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_mission_group_id_actions_get(mission_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mission_group_id: The mission_group_id to search for (required)
        :param str accept_language: Language header
        :return: GetGroupActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_groups_mission_group_id_actions_get_with_http_info(mission_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_groups_mission_group_id_actions_get_with_http_info(mission_group_id, **kwargs)  # noqa: E501
            return data

    def mission_groups_mission_group_id_actions_get_with_http_info(self, mission_group_id, **kwargs):  # noqa: E501
        """Retrieve the list of action definitions from the mission group with the specified mission group ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_mission_group_id_actions_get_with_http_info(mission_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mission_group_id: The mission_group_id to search for (required)
        :param str accept_language: Language header
        :return: GetGroupActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mission_group_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_groups_mission_group_id_actions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mission_group_id' is set
        if ('mission_group_id' not in params or
                params['mission_group_id'] is None):
            raise ValueError("Missing the required parameter `mission_group_id` when calling `mission_groups_mission_group_id_actions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_group_id' in params:
            path_params['mission_group_id'] = params['mission_group_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_groups/{mission_group_id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetGroupActionDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_groups_post(self, body, **kwargs):  # noqa: E501
        """Add a new mission group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostMissionGroups body: The details of the mission_groups (required)
        :param str accept_language: Language header
        :return: GetMissionGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_groups_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_groups_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def mission_groups_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new mission group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostMissionGroups body: The details of the mission_groups (required)
        :param str accept_language: Language header
        :return: GetMissionGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_groups_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `mission_groups_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionGroups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_queue_delete(self, **kwargs):  # noqa: E501
        """Abort all the pending and executing missions from the mission queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_queue_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mission_queue_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def mission_queue_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Abort all the pending and executing missions from the mission queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_queue_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_queue', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_queue_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of missions in the queue. Finished, failed, pending and executing missions will be displayed here  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetMissionQueues]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_queue_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mission_queue_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def mission_queue_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of missions in the queue. Finished, failed, pending and executing missions will be displayed here  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetMissionQueues]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_queue_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_queue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMissionQueues]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_queue_id_delete(self, id, **kwargs):  # noqa: E501
        """Abort the mission with the specified ID in the mission queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_queue_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_queue_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def mission_queue_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Abort the mission with the specified ID in the mission queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_queue_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mission_queue_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_queue/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_queue_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieve the details about the mission with the specified ID in the mission queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetMissionQueue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_queue_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_queue_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def mission_queue_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the details about the mission with the specified ID in the mission queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetMissionQueue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_queue_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mission_queue_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_queue/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionQueue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_queue_id_put(self, body, id, **kwargs):  # noqa: E501
        """Modify the values of the mission with the specified ID in the mission queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutMissionQueue body: The new values of the mission_queue (required)
        :param int id: The id to modify (required)
        :param str accept_language: Language header
        :return: GetMissionQueue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_queue_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_queue_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def mission_queue_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Modify the values of the mission with the specified ID in the mission queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutMissionQueue body: The new values of the mission_queue (required)
        :param int id: The id to modify (required)
        :param str accept_language: Language header
        :return: GetMissionQueue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_queue_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `mission_queue_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mission_queue_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_queue/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionQueue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_queue_mission_queue_id_actions_get(self, mission_queue_id, **kwargs):  # noqa: E501
        """Retrieve the list of actions from the mission with the specified ID in the mission queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_mission_queue_id_actions_get(mission_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mission_queue_id: The mission_queue_id to search for (required)
        :param str accept_language: Language header
        :return: GetMissionQueueActions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_queue_mission_queue_id_actions_get_with_http_info(mission_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_queue_mission_queue_id_actions_get_with_http_info(mission_queue_id, **kwargs)  # noqa: E501
            return data

    def mission_queue_mission_queue_id_actions_get_with_http_info(self, mission_queue_id, **kwargs):  # noqa: E501
        """Retrieve the list of actions from the mission with the specified ID in the mission queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_mission_queue_id_actions_get_with_http_info(mission_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mission_queue_id: The mission_queue_id to search for (required)
        :param str accept_language: Language header
        :return: GetMissionQueueActions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mission_queue_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_queue_mission_queue_id_actions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mission_queue_id' is set
        if ('mission_queue_id' not in params or
                params['mission_queue_id'] is None):
            raise ValueError("Missing the required parameter `mission_queue_id` when calling `mission_queue_mission_queue_id_actions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_queue_id' in params:
            path_params['mission_queue_id'] = params['mission_queue_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_queue/{mission_queue_id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionQueueActions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_queue_mission_queue_id_actions_id_get(self, id, mission_queue_id, **kwargs):  # noqa: E501
        """Retrieve the details about the action with the specified ID from the mission with the specified ID in the mission queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_mission_queue_id_actions_id_get(id, mission_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to search for (required)
        :param int mission_queue_id: The mission_queue_id to search for (required)
        :param str accept_language: Language header
        :return: GetMissionQueueAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_queue_mission_queue_id_actions_id_get_with_http_info(id, mission_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_queue_mission_queue_id_actions_id_get_with_http_info(id, mission_queue_id, **kwargs)  # noqa: E501
            return data

    def mission_queue_mission_queue_id_actions_id_get_with_http_info(self, id, mission_queue_id, **kwargs):  # noqa: E501
        """Retrieve the details about the action with the specified ID from the mission with the specified ID in the mission queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_mission_queue_id_actions_id_get_with_http_info(id, mission_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to search for (required)
        :param int mission_queue_id: The mission_queue_id to search for (required)
        :param str accept_language: Language header
        :return: GetMissionQueueAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'mission_queue_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_queue_mission_queue_id_actions_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mission_queue_mission_queue_id_actions_id_get`")  # noqa: E501
        # verify the required parameter 'mission_queue_id' is set
        if ('mission_queue_id' not in params or
                params['mission_queue_id'] is None):
            raise ValueError("Missing the required parameter `mission_queue_id` when calling `mission_queue_mission_queue_id_actions_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'mission_queue_id' in params:
            path_params['mission_queue_id'] = params['mission_queue_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_queue/{mission_queue_id}/actions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionQueueAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_queue_post(self, body, **kwargs):  # noqa: E501
        """Add a new mission to the mission queue. The mission will always go to the end of the queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostMissionQueues body: The details of the mission_queues (required)
        :param str accept_language: Language header
        :return: GetMissionQueues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_queue_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_queue_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def mission_queue_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new mission to the mission queue. The mission will always go to the end of the queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostMissionQueues body: The details of the mission_queues (required)
        :param str accept_language: Language header
        :return: GetMissionQueues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_queue_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `mission_queue_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/mission_queue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionQueues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of missions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetMissions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.missions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def missions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of missions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetMissions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/missions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMissions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_guid_definition_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the mission with the specified GUID as an action definition that can be inserted in another mission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_guid_definition_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: list[GetMissionDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_guid_definition_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_guid_definition_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def missions_guid_definition_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the mission with the specified GUID as an action definition that can be inserted in another mission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_guid_definition_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: list[GetMissionDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_guid_definition_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `missions_guid_definition_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/missions/{guid}/definition', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMissionDefinition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the mission with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def missions_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the mission with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `missions_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/missions/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the mission with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetMission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def missions_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the mission with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetMission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `missions_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/missions/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the mission with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutMission body: The new values of the mission (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetMission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def missions_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the mission with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutMission body: The new values of the mission (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetMission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `missions_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `missions_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/missions/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_mission_id_actions_get(self, mission_id, **kwargs):  # noqa: E501
        """Retrieve the list of actions that belong to the mission with the specified mission ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_get(mission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mission_id: The mission_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetMissionActions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_mission_id_actions_get_with_http_info(mission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_mission_id_actions_get_with_http_info(mission_id, **kwargs)  # noqa: E501
            return data

    def missions_mission_id_actions_get_with_http_info(self, mission_id, **kwargs):  # noqa: E501
        """Retrieve the list of actions that belong to the mission with the specified mission ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_get_with_http_info(mission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mission_id: The mission_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetMissionActions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mission_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_mission_id_actions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mission_id' is set
        if ('mission_id' not in params or
                params['mission_id'] is None):
            raise ValueError("Missing the required parameter `mission_id` when calling `missions_mission_id_actions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_id' in params:
            path_params['mission_id'] = params['mission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/missions/{mission_id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMissionActions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_mission_id_actions_guid_delete(self, guid, mission_id, **kwargs):  # noqa: E501
        """Erase the action with the specified GUID from the mission with the specified mission ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_guid_delete(guid, mission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str mission_id: The mission_id to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_mission_id_actions_guid_delete_with_http_info(guid, mission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_mission_id_actions_guid_delete_with_http_info(guid, mission_id, **kwargs)  # noqa: E501
            return data

    def missions_mission_id_actions_guid_delete_with_http_info(self, guid, mission_id, **kwargs):  # noqa: E501
        """Erase the action with the specified GUID from the mission with the specified mission ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_guid_delete_with_http_info(guid, mission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str mission_id: The mission_id to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'mission_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_mission_id_actions_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `missions_mission_id_actions_guid_delete`")  # noqa: E501
        # verify the required parameter 'mission_id' is set
        if ('mission_id' not in params or
                params['mission_id'] is None):
            raise ValueError("Missing the required parameter `mission_id` when calling `missions_mission_id_actions_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501
        if 'mission_id' in params:
            path_params['mission_id'] = params['mission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/missions/{mission_id}/actions/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_mission_id_actions_guid_get(self, guid, mission_id, **kwargs):  # noqa: E501
        """Retrieve the details about the action with the specified GUID that belongs to the mission with the specified mission ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_guid_get(guid, mission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str mission_id: The mission_id to search for (required)
        :param str accept_language: Language header
        :return: GetMissionAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_mission_id_actions_guid_get_with_http_info(guid, mission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_mission_id_actions_guid_get_with_http_info(guid, mission_id, **kwargs)  # noqa: E501
            return data

    def missions_mission_id_actions_guid_get_with_http_info(self, guid, mission_id, **kwargs):  # noqa: E501
        """Retrieve the details about the action with the specified GUID that belongs to the mission with the specified mission ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_guid_get_with_http_info(guid, mission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str mission_id: The mission_id to search for (required)
        :param str accept_language: Language header
        :return: GetMissionAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'mission_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_mission_id_actions_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `missions_mission_id_actions_guid_get`")  # noqa: E501
        # verify the required parameter 'mission_id' is set
        if ('mission_id' not in params or
                params['mission_id'] is None):
            raise ValueError("Missing the required parameter `mission_id` when calling `missions_mission_id_actions_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501
        if 'mission_id' in params:
            path_params['mission_id'] = params['mission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/missions/{mission_id}/actions/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_mission_id_actions_guid_put(self, body, guid, mission_id, **kwargs):  # noqa: E501
        """Modify the values of the action with the specified GUID that belongs to the mission with the specified mission ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_guid_put(body, guid, mission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutMissionAction body: The new values of the mission_action (required)
        :param str guid: The guid to modify (required)
        :param str mission_id: The mission_id to modify (required)
        :param str accept_language: Language header
        :return: GetMissionAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_mission_id_actions_guid_put_with_http_info(body, guid, mission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_mission_id_actions_guid_put_with_http_info(body, guid, mission_id, **kwargs)  # noqa: E501
            return data

    def missions_mission_id_actions_guid_put_with_http_info(self, body, guid, mission_id, **kwargs):  # noqa: E501
        """Modify the values of the action with the specified GUID that belongs to the mission with the specified mission ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_guid_put_with_http_info(body, guid, mission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutMissionAction body: The new values of the mission_action (required)
        :param str guid: The guid to modify (required)
        :param str mission_id: The mission_id to modify (required)
        :param str accept_language: Language header
        :return: GetMissionAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'mission_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_mission_id_actions_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `missions_mission_id_actions_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `missions_mission_id_actions_guid_put`")  # noqa: E501
        # verify the required parameter 'mission_id' is set
        if ('mission_id' not in params or
                params['mission_id'] is None):
            raise ValueError("Missing the required parameter `mission_id` when calling `missions_mission_id_actions_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501
        if 'mission_id' in params:
            path_params['mission_id'] = params['mission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/missions/{mission_id}/actions/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_mission_id_actions_post(self, body, mission_id, **kwargs):  # noqa: E501
        """Add a new action to the mission with the specified mission ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_post(body, mission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostMissionActions body: The details of the mission_actions (required)
        :param str mission_id: The mission_id to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetMissionActions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_mission_id_actions_post_with_http_info(body, mission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_mission_id_actions_post_with_http_info(body, mission_id, **kwargs)  # noqa: E501
            return data

    def missions_mission_id_actions_post_with_http_info(self, body, mission_id, **kwargs):  # noqa: E501
        """Add a new action to the mission with the specified mission ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_post_with_http_info(body, mission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostMissionActions body: The details of the mission_actions (required)
        :param str mission_id: The mission_id to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetMissionActions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'mission_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_mission_id_actions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `missions_mission_id_actions_post`")  # noqa: E501
        # verify the required parameter 'mission_id' is set
        if ('mission_id' not in params or
                params['mission_id'] is None):
            raise ValueError("Missing the required parameter `mission_id` when calling `missions_mission_id_actions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_id' in params:
            path_params['mission_id'] = params['mission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/missions/{mission_id}/actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionActions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_post(self, body, **kwargs):  # noqa: E501
        """Add a new mission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostMissions body: The details of the missions (required)
        :param str accept_language: Language header
        :return: GetMissions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def missions_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new mission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostMissions body: The details of the missions (required)
        :param str accept_language: Language header
        :return: GetMissions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `missions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/missions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modbus_get(self, **kwargs):  # noqa: E501
        """Retrieve the modbus registers linked to actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetModbus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modbus_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.modbus_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def modbus_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the modbus registers linked to actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetModbus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modbus_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/modbus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetModbus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modbus_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieve the modbus registers linked to an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetModbu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modbus_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.modbus_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def modbus_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the modbus registers linked to an action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetModbu
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modbus_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `modbus_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/modbus/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetModbu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modbus_missions_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of coils that can trigger a mission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_missions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetModbusMissions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modbus_missions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.modbus_missions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def modbus_missions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of coils that can trigger a mission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_missions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetModbusMissions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modbus_missions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/modbus/missions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetModbusMissions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modbus_missions_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Delete the specified ID on the the modbus mission table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_missions_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modbus_missions_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.modbus_missions_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def modbus_missions_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Delete the specified ID on the the modbus mission table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_missions_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modbus_missions_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `modbus_missions_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/modbus/missions/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modbus_missions_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the mission linked with the coil  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_missions_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetModbusMission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modbus_missions_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.modbus_missions_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def modbus_missions_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the mission linked with the coil  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_missions_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetModbusMission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modbus_missions_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `modbus_missions_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/modbus/missions/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetModbusMission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modbus_missions_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the modbus mission with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_missions_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutModbusMission body: The new values of the modbus_mission (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetModbusMission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modbus_missions_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.modbus_missions_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def modbus_missions_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the modbus mission with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_missions_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutModbusMission body: The new values of the modbus_mission (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetModbusMission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modbus_missions_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modbus_missions_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `modbus_missions_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/modbus/missions/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetModbusMission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modbus_missions_post(self, body, **kwargs):  # noqa: E501
        """Create a new link between a coil and a mission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_missions_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostModbusMissions body: The details of the modbus_missions (required)
        :param str accept_language: Language header
        :return: GetModbusMissions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modbus_missions_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.modbus_missions_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def modbus_missions_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new link between a coil and a mission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modbus_missions_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostModbusMissions body: The details of the modbus_missions (required)
        :param str accept_language: Language header
        :return: GetModbusMissions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modbus_missions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modbus_missions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/modbus/missions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetModbusMissions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of path guides  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetPathGuides]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def path_guides_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of path guides  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetPathGuides]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetPathGuides]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the path guide with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def path_guides_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the path guide with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the path guide with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetPathGuide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def path_guides_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the path guide with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetPathGuide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuide',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the path guide with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutPathGuide body: The new values of the path_guide (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetPathGuide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def path_guides_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the path guide with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutPathGuide body: The new values of the path_guide (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetPathGuide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `path_guides_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuide',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_path_guide_guid_options_get(self, path_guide_guid, **kwargs):  # noqa: E501
        """Retrieve the list of allowed start/via/goal options for the selected path guide  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_options_get(path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_guide_guid: The path_guide_guid to search for (required)
        :param str accept_language: Language header
        :return: GetPathGuideOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_path_guide_guid_options_get_with_http_info(path_guide_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_path_guide_guid_options_get_with_http_info(path_guide_guid, **kwargs)  # noqa: E501
            return data

    def path_guides_path_guide_guid_options_get_with_http_info(self, path_guide_guid, **kwargs):  # noqa: E501
        """Retrieve the list of allowed start/via/goal options for the selected path guide  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_options_get_with_http_info(path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_guide_guid: The path_guide_guid to search for (required)
        :param str accept_language: Language header
        :return: GetPathGuideOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path_guide_guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_path_guide_guid_options_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path_guide_guid' is set
        if ('path_guide_guid' not in params or
                params['path_guide_guid'] is None):
            raise ValueError("Missing the required parameter `path_guide_guid` when calling `path_guides_path_guide_guid_options_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_guide_guid' in params:
            path_params['path_guide_guid'] = params['path_guide_guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{path_guide_guid}/options', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuideOptions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_path_guide_guid_positions_get(self, path_guide_guid, **kwargs):  # noqa: E501
        """Retrieve the list of positions for the path guide with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_get(path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_guide_guid: The path_guide_guid to search for (required)
        :param str accept_language: Language header
        :return: list[GetPathGuidePositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_path_guide_guid_positions_get_with_http_info(path_guide_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_path_guide_guid_positions_get_with_http_info(path_guide_guid, **kwargs)  # noqa: E501
            return data

    def path_guides_path_guide_guid_positions_get_with_http_info(self, path_guide_guid, **kwargs):  # noqa: E501
        """Retrieve the list of positions for the path guide with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_get_with_http_info(path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_guide_guid: The path_guide_guid to search for (required)
        :param str accept_language: Language header
        :return: list[GetPathGuidePositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path_guide_guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_path_guide_guid_positions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path_guide_guid' is set
        if ('path_guide_guid' not in params or
                params['path_guide_guid'] is None):
            raise ValueError("Missing the required parameter `path_guide_guid` when calling `path_guides_path_guide_guid_positions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_guide_guid' in params:
            path_params['path_guide_guid'] = params['path_guide_guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{path_guide_guid}/positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetPathGuidePositions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_path_guide_guid_positions_guid_delete(self, guid, path_guide_guid, **kwargs):  # noqa: E501
        """Erase the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_guid_delete(guid, path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str path_guide_guid: The path_guide_guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_path_guide_guid_positions_guid_delete_with_http_info(guid, path_guide_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_path_guide_guid_positions_guid_delete_with_http_info(guid, path_guide_guid, **kwargs)  # noqa: E501
            return data

    def path_guides_path_guide_guid_positions_guid_delete_with_http_info(self, guid, path_guide_guid, **kwargs):  # noqa: E501
        """Erase the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_guid_delete_with_http_info(guid, path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str path_guide_guid: The path_guide_guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'path_guide_guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_path_guide_guid_positions_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_path_guide_guid_positions_guid_delete`")  # noqa: E501
        # verify the required parameter 'path_guide_guid' is set
        if ('path_guide_guid' not in params or
                params['path_guide_guid'] is None):
            raise ValueError("Missing the required parameter `path_guide_guid` when calling `path_guides_path_guide_guid_positions_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501
        if 'path_guide_guid' in params:
            path_params['path_guide_guid'] = params['path_guide_guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{path_guide_guid}/positions/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_path_guide_guid_positions_guid_get(self, guid, path_guide_guid, **kwargs):  # noqa: E501
        """Retrieve the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_guid_get(guid, path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str path_guide_guid: The path_guide_guid to search for (required)
        :param str accept_language: Language header
        :return: GetPathGuidePosition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_path_guide_guid_positions_guid_get_with_http_info(guid, path_guide_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_path_guide_guid_positions_guid_get_with_http_info(guid, path_guide_guid, **kwargs)  # noqa: E501
            return data

    def path_guides_path_guide_guid_positions_guid_get_with_http_info(self, guid, path_guide_guid, **kwargs):  # noqa: E501
        """Retrieve the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_guid_get_with_http_info(guid, path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str path_guide_guid: The path_guide_guid to search for (required)
        :param str accept_language: Language header
        :return: GetPathGuidePosition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'path_guide_guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_path_guide_guid_positions_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_path_guide_guid_positions_guid_get`")  # noqa: E501
        # verify the required parameter 'path_guide_guid' is set
        if ('path_guide_guid' not in params or
                params['path_guide_guid'] is None):
            raise ValueError("Missing the required parameter `path_guide_guid` when calling `path_guides_path_guide_guid_positions_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501
        if 'path_guide_guid' in params:
            path_params['path_guide_guid'] = params['path_guide_guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{path_guide_guid}/positions/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuidePosition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_path_guide_guid_positions_guid_put(self, body, guid, path_guide_guid, **kwargs):  # noqa: E501
        """Modify the values of the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_guid_put(body, guid, path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutPathGuidePosition body: The new values of the path_guide_position (required)
        :param str guid: The guid to modify (required)
        :param str path_guide_guid: The path_guide_guid to modify (required)
        :param str accept_language: Language header
        :return: GetPathGuidePosition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_path_guide_guid_positions_guid_put_with_http_info(body, guid, path_guide_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_path_guide_guid_positions_guid_put_with_http_info(body, guid, path_guide_guid, **kwargs)  # noqa: E501
            return data

    def path_guides_path_guide_guid_positions_guid_put_with_http_info(self, body, guid, path_guide_guid, **kwargs):  # noqa: E501
        """Modify the values of the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_guid_put_with_http_info(body, guid, path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutPathGuidePosition body: The new values of the path_guide_position (required)
        :param str guid: The guid to modify (required)
        :param str path_guide_guid: The path_guide_guid to modify (required)
        :param str accept_language: Language header
        :return: GetPathGuidePosition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'path_guide_guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_path_guide_guid_positions_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `path_guides_path_guide_guid_positions_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_path_guide_guid_positions_guid_put`")  # noqa: E501
        # verify the required parameter 'path_guide_guid' is set
        if ('path_guide_guid' not in params or
                params['path_guide_guid'] is None):
            raise ValueError("Missing the required parameter `path_guide_guid` when calling `path_guides_path_guide_guid_positions_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501
        if 'path_guide_guid' in params:
            path_params['path_guide_guid'] = params['path_guide_guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{path_guide_guid}/positions/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuidePosition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_path_guide_guid_positions_post(self, body, path_guide_guid, **kwargs):  # noqa: E501
        """Add a new position to the path guide with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_post(body, path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPathGuidePositions body: The details of the path_guide_positions (required)
        :param str path_guide_guid: The path_guide_guid to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetPathGuidePositions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_path_guide_guid_positions_post_with_http_info(body, path_guide_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_path_guide_guid_positions_post_with_http_info(body, path_guide_guid, **kwargs)  # noqa: E501
            return data

    def path_guides_path_guide_guid_positions_post_with_http_info(self, body, path_guide_guid, **kwargs):  # noqa: E501
        """Add a new position to the path guide with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_post_with_http_info(body, path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPathGuidePositions body: The details of the path_guide_positions (required)
        :param str path_guide_guid: The path_guide_guid to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetPathGuidePositions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'path_guide_guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_path_guide_guid_positions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `path_guides_path_guide_guid_positions_post`")  # noqa: E501
        # verify the required parameter 'path_guide_guid' is set
        if ('path_guide_guid' not in params or
                params['path_guide_guid'] is None):
            raise ValueError("Missing the required parameter `path_guide_guid` when calling `path_guides_path_guide_guid_positions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_guide_guid' in params:
            path_params['path_guide_guid'] = params['path_guide_guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{path_guide_guid}/positions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuidePositions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_positions_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of positions used for path guides  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_positions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetPathGuidesPositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_positions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_positions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def path_guides_positions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of positions used for path guides  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_positions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetPathGuidesPositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_positions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides_positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetPathGuidesPositions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_positions_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the path guide position with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_positions_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_positions_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_positions_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def path_guides_positions_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the path guide position with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_positions_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_positions_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_positions_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides_positions/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_positions_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the position for path guides with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_positions_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetPathGuidesPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_positions_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_positions_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def path_guides_positions_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the position for path guides with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_positions_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetPathGuidesPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_positions_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_positions_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides_positions/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuidesPosition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_positions_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the position for path guides with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_positions_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutPathGuidesPosition body: The new values of the path_guides_position (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetPathGuidesPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_positions_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_positions_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def path_guides_positions_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the position for path guides with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_positions_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutPathGuidesPosition body: The new values of the path_guides_position (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetPathGuidesPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_positions_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `path_guides_positions_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_positions_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides_positions/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuidesPosition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_positions_post(self, body, **kwargs):  # noqa: E501
        """Add a new position in a path guide  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_positions_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPathGuidesPositions body: The details of the path_guides_positions (required)
        :param str accept_language: Language header
        :return: GetPathGuidesPositions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_positions_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_positions_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def path_guides_positions_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new position in a path guide  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_positions_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPathGuidesPositions body: The details of the path_guides_positions (required)
        :param str accept_language: Language header
        :return: GetPathGuidesPositions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_positions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `path_guides_positions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides_positions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuidesPositions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_post(self, body, **kwargs):  # noqa: E501
        """Add a new path guide  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPathGuides body: The details of the path_guides (required)
        :param str accept_language: Language header
        :return: GetPathGuides
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def path_guides_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new path guide  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPathGuides body: The details of the path_guides (required)
        :param str accept_language: Language header
        :return: GetPathGuides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `path_guides_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuides',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_precalc_get(self, **kwargs):  # noqa: E501
        """Retrieve the status of path guides precalculation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_precalc_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetPathGuidesPrecalc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_precalc_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_precalc_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def path_guides_precalc_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the status of path guides precalculation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_precalc_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetPathGuidesPrecalc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_precalc_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides_precalc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuidesPrecalc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_precalc_post(self, body, **kwargs):  # noqa: E501
        """Start/stop precalculation of the specified path guide  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_precalc_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPathGuidesPrecalc body: The details of the path_guides_precalc (required)
        :param str accept_language: Language header
        :return: GetPathGuidesPrecalc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_precalc_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_precalc_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def path_guides_precalc_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Start/stop precalculation of the specified path guide  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_precalc_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPathGuidesPrecalc body: The details of the path_guides_precalc (required)
        :param str accept_language: Language header
        :return: GetPathGuidesPrecalc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_precalc_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `path_guides_precalc_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/path_guides_precalc', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuidesPrecalc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paths_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of paths  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paths_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetPaths]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paths_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paths_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def paths_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of paths  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paths_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetPaths]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paths_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/paths', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetPaths]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paths_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the path with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paths_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paths_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.paths_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def paths_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the path with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paths_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paths_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `paths_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/paths/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paths_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the path with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paths_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paths_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.paths_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def paths_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the path with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paths_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paths_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `paths_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/paths/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paths_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the path with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paths_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutPath body: The new values of the path (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetPath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paths_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.paths_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def paths_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the path with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paths_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutPath body: The new values of the path (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetPath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paths_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `paths_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `paths_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/paths/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paths_post(self, body, **kwargs):  # noqa: E501
        """Add a new path  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paths_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPaths body: The details of the paths (required)
        :param str accept_language: Language header
        :return: GetPaths
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paths_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.paths_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def paths_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new path  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paths_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPaths body: The details of the paths (required)
        :param str accept_language: Language header
        :return: GetPaths
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paths_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `paths_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/paths', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPaths',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permissions_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the permission with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permissions_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.permissions_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.permissions_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def permissions_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the permission with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permissions_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permissions_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `permissions_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/permissions/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permissions_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the permission with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permissions_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.permissions_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.permissions_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def permissions_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the permission with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permissions_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permissions_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `permissions_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/permissions/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPermission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permissions_guid_put(self, guid, **kwargs):  # noqa: E501
        """Modify the values of the permission with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permissions_guid_put(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.permissions_guid_put_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.permissions_guid_put_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def permissions_guid_put_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Modify the values of the permission with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permissions_guid_put_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permissions_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `permissions_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/permissions/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPermission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def position_transition_lists_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of position transition lists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_transition_lists_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetPositionTransitionLists
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.position_transition_lists_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.position_transition_lists_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def position_transition_lists_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of position transition lists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_transition_lists_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetPositionTransitionLists
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method position_transition_lists_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/position_transition_lists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPositionTransitionLists',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def position_transition_lists_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the position transition list with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_transition_lists_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.position_transition_lists_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.position_transition_lists_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def position_transition_lists_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the position transition list with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_transition_lists_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method position_transition_lists_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `position_transition_lists_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/position_transition_lists/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def position_transition_lists_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the position transition list with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_transition_lists_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetPositionTransitionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.position_transition_lists_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.position_transition_lists_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def position_transition_lists_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the position transition list with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_transition_lists_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetPositionTransitionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method position_transition_lists_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `position_transition_lists_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/position_transition_lists/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPositionTransitionList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def position_transition_lists_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the position transition list with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_transition_lists_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutPositionTransitionList body: The new values of the position_transition_list (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetPositionTransitionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.position_transition_lists_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.position_transition_lists_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def position_transition_lists_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the position transition list with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_transition_lists_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutPositionTransitionList body: The new values of the position_transition_list (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetPositionTransitionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method position_transition_lists_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `position_transition_lists_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `position_transition_lists_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/position_transition_lists/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPositionTransitionList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def position_transition_lists_post(self, body, **kwargs):  # noqa: E501
        """Add a new position transition list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_transition_lists_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPositionTransitionLists body: The details of the position_transition_lists (required)
        :param str accept_language: Language header
        :return: GetPositionTransitionLists
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.position_transition_lists_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.position_transition_lists_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def position_transition_lists_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new position transition list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_transition_lists_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPositionTransitionLists body: The details of the position_transition_lists (required)
        :param str accept_language: Language header
        :return: GetPositionTransitionLists
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method position_transition_lists_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `position_transition_lists_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/position_transition_lists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPositionTransitionLists',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def position_types_get(self, **kwargs):  # noqa: E501
        """Retrieve a list of possible position types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_types_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetPositionTypes]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.position_types_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.position_types_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def position_types_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of possible position types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_types_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetPositionTypes]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method position_types_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/position_types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetPositionTypes]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def position_types_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieve the details about the position type with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_types_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetPositionType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.position_types_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.position_types_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def position_types_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the details about the position type with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.position_types_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetPositionType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method position_types_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `position_types_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/position_types/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPositionType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def positions_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of positions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetPositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.positions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.positions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def positions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of positions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetPositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method positions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetPositions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def positions_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the position with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.positions_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.positions_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def positions_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the position with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method positions_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `positions_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/positions/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def positions_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the position with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.positions_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.positions_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def positions_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the position with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method positions_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `positions_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/positions/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPosition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def positions_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the position with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutPosition body: The new values of the position (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.positions_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.positions_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def positions_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the position with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutPosition body: The new values of the position (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetPosition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method positions_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `positions_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `positions_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/positions/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPosition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def positions_parent_guid_helper_positions_get(self, parent_guid, **kwargs):  # noqa: E501
        """Retrieve the list of helper positions for the position with the specified parent GUID. Only Charging Stations, V markers, VL markers, Shelf and Trolley positions have helper positions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_parent_guid_helper_positions_get(parent_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent_guid: The parent_guid to search for (required)
        :param str accept_language: Language header
        :return: list[GetHelperPositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.positions_parent_guid_helper_positions_get_with_http_info(parent_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.positions_parent_guid_helper_positions_get_with_http_info(parent_guid, **kwargs)  # noqa: E501
            return data

    def positions_parent_guid_helper_positions_get_with_http_info(self, parent_guid, **kwargs):  # noqa: E501
        """Retrieve the list of helper positions for the position with the specified parent GUID. Only Charging Stations, V markers, VL markers, Shelf and Trolley positions have helper positions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_parent_guid_helper_positions_get_with_http_info(parent_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent_guid: The parent_guid to search for (required)
        :param str accept_language: Language header
        :return: list[GetHelperPositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent_guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method positions_parent_guid_helper_positions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parent_guid' is set
        if ('parent_guid' not in params or
                params['parent_guid'] is None):
            raise ValueError("Missing the required parameter `parent_guid` when calling `positions_parent_guid_helper_positions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_guid' in params:
            path_params['parent_guid'] = params['parent_guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/positions/{parent_guid}/helper_positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetHelperPositions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def positions_pos_id_docking_offsets_get(self, pos_id, **kwargs):  # noqa: E501
        """Retrieve the details of the docking offset of the position with the specified position ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_pos_id_docking_offsets_get(pos_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pos_id: The pos_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetPosDockingOffsets]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.positions_pos_id_docking_offsets_get_with_http_info(pos_id, **kwargs)  # noqa: E501
        else:
            (data) = self.positions_pos_id_docking_offsets_get_with_http_info(pos_id, **kwargs)  # noqa: E501
            return data

    def positions_pos_id_docking_offsets_get_with_http_info(self, pos_id, **kwargs):  # noqa: E501
        """Retrieve the details of the docking offset of the position with the specified position ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_pos_id_docking_offsets_get_with_http_info(pos_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pos_id: The pos_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetPosDockingOffsets]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pos_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method positions_pos_id_docking_offsets_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pos_id' is set
        if ('pos_id' not in params or
                params['pos_id'] is None):
            raise ValueError("Missing the required parameter `pos_id` when calling `positions_pos_id_docking_offsets_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pos_id' in params:
            path_params['pos_id'] = params['pos_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/positions/{pos_id}/docking_offsets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetPosDockingOffsets]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def positions_post(self, body, **kwargs):  # noqa: E501
        """Add a new position  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPositions body: The details of the positions (required)
        :param str accept_language: Language header
        :return: GetPositions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.positions_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.positions_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def positions_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new position  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.positions_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPositions body: The details of the positions (required)
        :param str accept_language: Language header
        :return: GetPositions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method positions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `positions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/positions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPositions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def registers_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of PLC registers from the robot. Registers 1 to 100 are integers and registers 101-200 are float  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetRegisters]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.registers_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.registers_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def registers_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of PLC registers from the robot. Registers 1 to 100 are integers and registers 101-200 are float  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetRegisters]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registers_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/registers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetRegisters]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def registers_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieve the value of the PLC register with the specified ID. Registers 1 to 100 are integers and registers 101-200 are float  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registers_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetRegister
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.registers_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.registers_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def registers_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the value of the PLC register with the specified ID. Registers 1 to 100 are integers and registers 101-200 are float  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registers_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetRegister
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registers_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `registers_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/registers/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRegister',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def registers_id_post(self, body, id, **kwargs):  # noqa: E501
        """Modify the value of the PLC register with the specified ID. Registers 1 to 100 are integers and registers 101-200 are float. Even though this is not a standard use of the POST call it has been included for compatibility purposes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registers_id_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostRegister body: The details of the register (required)
        :param int id: The id to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetRegister
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.registers_id_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.registers_id_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def registers_id_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Modify the value of the PLC register with the specified ID. Registers 1 to 100 are integers and registers 101-200 are float. Even though this is not a standard use of the POST call it has been included for compatibility purposes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registers_id_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostRegister body: The details of the register (required)
        :param int id: The id to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetRegister
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registers_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `registers_id_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `registers_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/registers/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRegister',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def registers_id_put(self, body, id, **kwargs):  # noqa: E501
        """Modify the value of the PLC register with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registers_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutRegister body: The new values of the register (required)
        :param int id: The id to modify (required)
        :param str accept_language: Language header
        :return: GetRegister
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.registers_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.registers_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def registers_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Modify the value of the PLC register with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registers_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutRegister body: The new values of the register (required)
        :param int id: The id to modify (required)
        :param str accept_language: Language header
        :return: GetRegister
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registers_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `registers_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `registers_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/registers/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRegister',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remote_support_get(self, **kwargs):  # noqa: E501
        """Retrieve the status of the remote support connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remote_support_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetRemoteSupport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remote_support_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.remote_support_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def remote_support_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the status of the remote support connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remote_support_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetRemoteSupport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remote_support_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/remote_support', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRemoteSupport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remote_support_log_get(self, **kwargs):  # noqa: E501
        """Retrieve the list with the actions performed by the remote support controller  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remote_support_log_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetRemoteSupportLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remote_support_log_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.remote_support_log_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def remote_support_log_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list with the actions performed by the remote support controller  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remote_support_log_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetRemoteSupportLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remote_support_log_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/remote_support/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRemoteSupportLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remote_support_put(self, body, **kwargs):  # noqa: E501
        """Modify the remote support connection timeout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remote_support_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutRemoteSupport body: The new values of the remote_support (required)
        :param str accept_language: Language header
        :return: GetRemoteSupport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remote_support_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.remote_support_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def remote_support_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """Modify the remote support connection timeout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remote_support_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutRemoteSupport body: The new values of the remote_support (required)
        :param str accept_language: Language header
        :return: GetRemoteSupport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remote_support_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `remote_support_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/remote_support', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRemoteSupport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def robots_post(self, body, **kwargs):  # noqa: E501
        """Add information about other robots in the world. This is used by the Fleet manager to avoid robot collisions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.robots_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostRobots body: The details of the robots (required)
        :param str accept_language: Language header
        :return: GetRobots
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.robots_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.robots_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def robots_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add information about other robots in the world. This is used by the Fleet manager to avoid robot collisions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.robots_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostRobots body: The details of the robots (required)
        :param str accept_language: Language header
        :return: GetRobots
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method robots_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `robots_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/robots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRobots',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_book_get(self, **kwargs):  # noqa: E501
        """Retrieve service book entries accessible by user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_book_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetServiceBooks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_book_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.service_book_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def service_book_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve service book entries accessible by user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_book_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetServiceBooks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_book_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/service_book', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetServiceBooks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_book_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the note with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_book_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_book_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.service_book_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def service_book_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the note with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_book_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_book_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `service_book_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/service_book/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_book_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve note with the GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_book_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetServiceBook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_book_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.service_book_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def service_book_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve note with the GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_book_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetServiceBook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_book_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `service_book_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/service_book/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetServiceBook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_book_post(self, body, **kwargs):  # noqa: E501
        """Add a service book note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_book_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostServiceBooks body: The details of the service_books (required)
        :param str accept_language: Language header
        :return: GetServiceBooks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_book_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.service_book_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def service_book_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a service book note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_book_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostServiceBooks body: The details of the service_books (required)
        :param str accept_language: Language header
        :return: GetServiceBooks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_book_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_book_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/service_book', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetServiceBooks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of sessions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSessions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sessions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sessions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of sessions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSessions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSessions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the session with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def sessions_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the session with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `sessions_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_guid_export_get(self, guid, **kwargs):  # noqa: E501
        """Download a file containing the session with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_guid_export_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetSessionExport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_guid_export_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_guid_export_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def sessions_guid_export_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Download a file containing the session with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_guid_export_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetSessionExport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_guid_export_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `sessions_guid_export_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/{guid}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSessionExport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the session with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def sessions_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the session with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `sessions_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the session with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSession body: The new values of the session (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def sessions_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the session with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSession body: The new values of the session (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sessions_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `sessions_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_import_delete(self, **kwargs):  # noqa: E501
        """Cancel currently running import  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_import_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_import_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sessions_import_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def sessions_import_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Cancel currently running import  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_import_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_import_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/import', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_import_get(self, **kwargs):  # noqa: E501
        """Get progress of the running import  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_import_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetSessionImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_import_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sessions_import_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sessions_import_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get progress of the running import  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_import_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetSessionImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_import_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/import', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSessionImport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_import_post(self, body, **kwargs):  # noqa: E501
        """Import the session contained in the file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_import_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSessionImport body: The details of the session_import (required)
        :param str accept_language: Language header
        :return: GetSessionImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_import_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_import_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def sessions_import_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Import the session contained in the file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_import_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSessionImport body: The details of the session_import (required)
        :param str accept_language: Language header
        :return: GetSessionImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_import_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sessions_import_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSessionImport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_post(self, body, **kwargs):  # noqa: E501
        """Add a new session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSessions body: The details of the sessions (required)
        :param str accept_language: Language header
        :return: GetSessions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def sessions_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSessions body: The details of the sessions (required)
        :param str accept_language: Language header
        :return: GetSessions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sessions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sessions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSessions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_session_id_maps_get(self, session_id, **kwargs):  # noqa: E501
        """Retrieve the list of maps that belong to the session with the specified session ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_session_id_maps_get(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The session_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetSessionMaps]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_session_id_maps_get_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_session_id_maps_get_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def sessions_session_id_maps_get_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Retrieve the list of maps that belong to the session with the specified session ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_session_id_maps_get_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The session_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetSessionMaps]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_session_id_maps_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `sessions_session_id_maps_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session_id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/{session_id}/maps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSessionMaps]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_session_id_missions_get(self, session_id, **kwargs):  # noqa: E501
        """Retrieve the list of missions that belong to the session with the specified session ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_session_id_missions_get(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The session_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetSessionMissions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_session_id_missions_get_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_session_id_missions_get_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def sessions_session_id_missions_get_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Retrieve the list of missions that belong to the session with the specified session ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_session_id_missions_get_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The session_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetSessionMissions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_session_id_missions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `sessions_session_id_missions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session_id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/{session_id}/missions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSessionMissions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_session_id_position_transition_lists_get(self, session_id, **kwargs):  # noqa: E501
        """Retrieve the list of position transition lists that belong to the session with the specified session ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_session_id_position_transition_lists_get(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The session_id to search for (required)
        :param str accept_language: Language header
        :return: GetPositionTransitionListFromSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_session_id_position_transition_lists_get_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_session_id_position_transition_lists_get_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def sessions_session_id_position_transition_lists_get_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Retrieve the list of position transition lists that belong to the session with the specified session ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_session_id_position_transition_lists_get_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The session_id to search for (required)
        :param str accept_language: Language header
        :return: GetPositionTransitionListFromSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_session_id_position_transition_lists_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `sessions_session_id_position_transition_lists_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session_id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sessions/{session_id}/position_transition_lists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPositionTransitionListFromSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def setting_groups_get(self, **kwargs):  # noqa: E501
        """Retrieve a list with the settings groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.setting_groups_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSettingGroups]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.setting_groups_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.setting_groups_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def setting_groups_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list with the settings groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.setting_groups_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSettingGroups]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method setting_groups_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/setting_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSettingGroups]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def setting_groups_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieve the details about the settings group with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.setting_groups_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetSettingGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.setting_groups_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.setting_groups_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def setting_groups_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the details about the settings group with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.setting_groups_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetSettingGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method setting_groups_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `setting_groups_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/setting_groups/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSettingGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def setting_groups_settings_group_id_settings_advanced_get(self, settings_group_id, **kwargs):  # noqa: E501
        """Retrieve the list of advanced settings from the settings group with the specified settings group ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.setting_groups_settings_group_id_settings_advanced_get(settings_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int settings_group_id: The settings_group_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetSettingGroupAdvancedSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.setting_groups_settings_group_id_settings_advanced_get_with_http_info(settings_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.setting_groups_settings_group_id_settings_advanced_get_with_http_info(settings_group_id, **kwargs)  # noqa: E501
            return data

    def setting_groups_settings_group_id_settings_advanced_get_with_http_info(self, settings_group_id, **kwargs):  # noqa: E501
        """Retrieve the list of advanced settings from the settings group with the specified settings group ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.setting_groups_settings_group_id_settings_advanced_get_with_http_info(settings_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int settings_group_id: The settings_group_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetSettingGroupAdvancedSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_group_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method setting_groups_settings_group_id_settings_advanced_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'settings_group_id' is set
        if ('settings_group_id' not in params or
                params['settings_group_id'] is None):
            raise ValueError("Missing the required parameter `settings_group_id` when calling `setting_groups_settings_group_id_settings_advanced_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'settings_group_id' in params:
            path_params['settings_group_id'] = params['settings_group_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/setting_groups/{settings_group_id}/settings/advanced', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSettingGroupAdvancedSettings]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def setting_groups_settings_group_id_settings_get(self, settings_group_id, **kwargs):  # noqa: E501
        """Retrieve the list of settings from the settings group with the specified settings group ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.setting_groups_settings_group_id_settings_get(settings_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int settings_group_id: The settings_group_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetSettingGroupSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.setting_groups_settings_group_id_settings_get_with_http_info(settings_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.setting_groups_settings_group_id_settings_get_with_http_info(settings_group_id, **kwargs)  # noqa: E501
            return data

    def setting_groups_settings_group_id_settings_get_with_http_info(self, settings_group_id, **kwargs):  # noqa: E501
        """Retrieve the list of settings from the settings group with the specified settings group ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.setting_groups_settings_group_id_settings_get_with_http_info(settings_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int settings_group_id: The settings_group_id to search for (required)
        :param str accept_language: Language header
        :return: list[GetSettingGroupSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_group_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method setting_groups_settings_group_id_settings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'settings_group_id' is set
        if ('settings_group_id' not in params or
                params['settings_group_id'] is None):
            raise ValueError("Missing the required parameter `settings_group_id` when calling `setting_groups_settings_group_id_settings_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'settings_group_id' in params:
            path_params['settings_group_id'] = params['settings_group_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/setting_groups/{settings_group_id}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSettingGroupSettings]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_advanced_get(self, **kwargs):  # noqa: E501
        """Retrieve the list with the advanced settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_advanced_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSettingsAdvanced]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_advanced_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.settings_advanced_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def settings_advanced_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list with the advanced settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_advanced_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSettingsAdvanced]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_advanced_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/settings/advanced', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSettingsAdvanced]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_advanced_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieve the details of the advanced setting with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_advanced_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetSettingAdvanced
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_advanced_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.settings_advanced_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def settings_advanced_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the details of the advanced setting with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_advanced_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetSettingAdvanced
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_advanced_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `settings_advanced_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/settings/advanced/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSettingAdvanced',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_advanced_id_put(self, body, id, **kwargs):  # noqa: E501
        """Modify the values of the advanced setting with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_advanced_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSettingAdvanced body: The new values of the setting_advanced (required)
        :param str id: The id to modify (required)
        :param str accept_language: Language header
        :return: GetSettingAdvanced
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_advanced_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.settings_advanced_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def settings_advanced_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Modify the values of the advanced setting with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_advanced_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSettingAdvanced body: The new values of the setting_advanced (required)
        :param str id: The id to modify (required)
        :param str accept_language: Language header
        :return: GetSettingAdvanced
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_advanced_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `settings_advanced_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `settings_advanced_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/settings/advanced/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSettingAdvanced',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_get(self, **kwargs):  # noqa: E501
        """Retrieve a list with the settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.settings_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def settings_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list with the settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSettings]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieve the details of the setting with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.settings_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def settings_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the details of the setting with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id to search for (required)
        :param str accept_language: Language header
        :return: GetSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `settings_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/settings/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_id_put(self, body, id, **kwargs):  # noqa: E501
        """Modify the values of the setting with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSetting body: The new values of the setting (required)
        :param str id: The id to modify (required)
        :param str accept_language: Language header
        :return: GetSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.settings_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def settings_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Modify the values of the setting with the specified ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSetting body: The new values of the setting (required)
        :param str id: The id to modify (required)
        :param str accept_language: Language header
        :return: GetSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `settings_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `settings_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/settings/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shelf_types_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of shelf types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shelf_types_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetShelfTypes]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shelf_types_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.shelf_types_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def shelf_types_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of shelf types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shelf_types_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetShelfTypes]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shelf_types_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/shelf_types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetShelfTypes]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shelf_types_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the shelf type with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shelf_types_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shelf_types_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.shelf_types_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def shelf_types_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the shelf type with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shelf_types_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shelf_types_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `shelf_types_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/shelf_types/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shelf_types_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the shelf type with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shelf_types_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetShelfType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shelf_types_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.shelf_types_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def shelf_types_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the shelf type with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shelf_types_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetShelfType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shelf_types_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `shelf_types_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/shelf_types/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetShelfType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shelf_types_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the shelf type with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shelf_types_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutShelfType body: The new values of the shelf_type (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetShelfType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shelf_types_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.shelf_types_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def shelf_types_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the shelf type with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shelf_types_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutShelfType body: The new values of the shelf_type (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetShelfType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shelf_types_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shelf_types_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `shelf_types_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/shelf_types/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetShelfType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shelf_types_post(self, body, **kwargs):  # noqa: E501
        """Add a new shelf type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shelf_types_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostShelfTypes body: The details of the shelf_types (required)
        :param str accept_language: Language header
        :return: GetShelfTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shelf_types_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.shelf_types_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def shelf_types_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new shelf type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shelf_types_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostShelfTypes body: The details of the shelf_types (required)
        :param str accept_language: Language header
        :return: GetShelfTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shelf_types_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shelf_types_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/shelf_types', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetShelfTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_backups_get(self, **kwargs):  # noqa: E501
        """Retrieve the list with all the software backups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_backups_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSoftwareBackups]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_backups_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.software_backups_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def software_backups_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list with all the software backups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_backups_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSoftwareBackups]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_backups_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/backups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSoftwareBackups]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_backups_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the software backup with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_backups_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_backups_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.software_backups_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def software_backups_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the software backup with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_backups_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_backups_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `software_backups_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/backups/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_backups_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the software backup with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_backups_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetSoftwareBackup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_backups_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.software_backups_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def software_backups_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the software backup with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_backups_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetSoftwareBackup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_backups_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `software_backups_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/backups/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSoftwareBackup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_backups_guid_post(self, guid, **kwargs):  # noqa: E501
        """If it exists a software backup with the specified GUID it will restore that backup. Otherwise, it will create a software backup with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_backups_guid_post(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetSoftwareBackup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_backups_guid_post_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.software_backups_guid_post_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def software_backups_guid_post_with_http_info(self, guid, **kwargs):  # noqa: E501
        """If it exists a software backup with the specified GUID it will restore that backup. Otherwise, it will create a software backup with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_backups_guid_post_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetSoftwareBackup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_backups_guid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `software_backups_guid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/backups/{guid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSoftwareBackup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_backups_post(self, **kwargs):  # noqa: E501
        """Create a new software backup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_backups_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetSoftwareBackups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_backups_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.software_backups_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def software_backups_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new software backup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_backups_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetSoftwareBackups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_backups_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/backups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSoftwareBackups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_lock_get(self, **kwargs):  # noqa: E501
        """Retrieve the status of the software lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_lock_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSoftwareLockSelf]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_lock_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.software_lock_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def software_lock_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the status of the software lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_lock_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSoftwareLockSelf]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_lock_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/lock', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSoftwareLockSelf]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_lock_put(self, body, **kwargs):  # noqa: E501
        """Modify the software lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_lock_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSoftwareLockSelf body: The new values of the software_lock_self (required)
        :param str accept_language: Language header
        :return: GetSoftwareLockSelf
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_lock_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.software_lock_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def software_lock_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """Modify the software lock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_lock_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSoftwareLockSelf body: The new values of the software_lock_self (required)
        :param str accept_language: Language header
        :return: GetSoftwareLockSelf
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_lock_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `software_lock_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/lock', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSoftwareLockSelf',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_logs_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of software upgrade logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_logs_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSoftwareLogs]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_logs_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.software_logs_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def software_logs_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of software upgrade logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_logs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSoftwareLogs]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_logs_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSoftwareLogs]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_logs_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the software upgrade log with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_logs_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetSoftwareLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_logs_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.software_logs_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def software_logs_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the software upgrade log with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_logs_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetSoftwareLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_logs_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `software_logs_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/logs/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSoftwareLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_upgrades_get(self, **kwargs):  # noqa: E501
        """Retrieve a list of the software upgrade performed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_upgrades_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSoftwareUpgrades]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_upgrades_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.software_upgrades_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def software_upgrades_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of the software upgrade performed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_upgrades_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSoftwareUpgrades]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_upgrades_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/upgrades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSoftwareUpgrades]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_upgrades_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the upgrade file with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_upgrades_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_upgrades_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.software_upgrades_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def software_upgrades_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the upgrade file with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_upgrades_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_upgrades_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `software_upgrades_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/upgrades/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_upgrades_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details of the software upgrade with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_upgrades_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetSoftwareUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_upgrades_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.software_upgrades_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def software_upgrades_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details of the software upgrade with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_upgrades_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetSoftwareUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_upgrades_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `software_upgrades_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/upgrades/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSoftwareUpgrade',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_upgrades_guid_post(self, guid, **kwargs):  # noqa: E501
        """Upgrade to the version of the upgrade file with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_upgrades_guid_post(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetSoftwareUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_upgrades_guid_post_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.software_upgrades_guid_post_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def software_upgrades_guid_post_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Upgrade to the version of the upgrade file with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_upgrades_guid_post_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetSoftwareUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_upgrades_guid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `software_upgrades_guid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/upgrades/{guid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSoftwareUpgrade',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def software_upgrades_post(self, **kwargs):  # noqa: E501
        """Upgrade with the provided upgrade file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_upgrades_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetSoftwareUpgrades
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.software_upgrades_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.software_upgrades_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def software_upgrades_post_with_http_info(self, **kwargs):  # noqa: E501
        """Upgrade with the provided upgrade file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.software_upgrades_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetSoftwareUpgrades
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method software_upgrades_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/software/upgrades', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSoftwareUpgrades',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sounds_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of sounds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sounds_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSounds]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sounds_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sounds_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sounds_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of sounds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sounds_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetSounds]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sounds_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sounds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSounds]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sounds_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the sound with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sounds_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sounds_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sounds_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def sounds_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the sound with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sounds_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sounds_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `sounds_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sounds/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sounds_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the sound with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sounds_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetSound
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sounds_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sounds_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def sounds_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the sound with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sounds_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetSound
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sounds_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `sounds_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sounds/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSound',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sounds_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the sound with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sounds_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSound body: The new values of the sound (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetSound
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sounds_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sounds_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def sounds_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the sound with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sounds_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSound body: The new values of the sound (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetSound
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sounds_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sounds_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `sounds_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sounds/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSound',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sounds_guid_stream_get(self, guid, **kwargs):  # noqa: E501
        """Download the sound file of the sound with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sounds_guid_stream_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: list[GetSoundStream]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sounds_guid_stream_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.sounds_guid_stream_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def sounds_guid_stream_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Download the sound file of the sound with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sounds_guid_stream_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: list[GetSoundStream]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sounds_guid_stream_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `sounds_guid_stream_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sounds/{guid}/stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSoundStream]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sounds_post(self, body, **kwargs):  # noqa: E501
        """Add a new sound  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sounds_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSounds body: The details of the sounds (required)
        :param str accept_language: Language header
        :return: GetSounds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sounds_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.sounds_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def sounds_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new sound  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sounds_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSounds body: The details of the sounds (required)
        :param str accept_language: Language header
        :return: GetSounds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sounds_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sounds_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/sounds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSounds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statistics_distance_get(self, **kwargs):  # noqa: E501
        """Retrieve the list with the distance driven by the robot at different dates and times  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statistics_distance_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetDistanceStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statistics_distance_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.statistics_distance_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def statistics_distance_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list with the distance driven by the robot at different dates and times  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statistics_distance_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetDistanceStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistics_distance_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/statistics/distance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDistanceStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def status_get(self, **kwargs):  # noqa: E501
        """Retrieve the status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def status_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def status_put(self, body, **kwargs):  # noqa: E501
        """Modify the status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutStatus body: The new values of the status (required)
        :param str accept_language: Language header
        :return: GetStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.status_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.status_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def status_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """Modify the status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutStatus body: The new values of the status (required)
        :param str accept_language: Language header
        :return: GetStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `status_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_info_get(self, **kwargs):  # noqa: E501
        """Retrieve the information about the system. It contains different information like serial numbers of hardware components, MAC addresses of network cards, etc…  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_info_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetSystemInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_info_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_info_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_info_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the information about the system. It contains different information like serial numbers of hardware components, MAC addresses of network cards, etc…  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_info_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetSystemInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_info_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/system/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSystemInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_groups_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of user groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetUserGroups]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_groups_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_groups_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_groups_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of user groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetUserGroups]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_groups_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/user_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetUserGroups]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_groups_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the user group with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_groups_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.user_groups_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def user_groups_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the user group with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_groups_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `user_groups_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/user_groups/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_groups_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the user group with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetUserGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_groups_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.user_groups_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def user_groups_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the user group with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetUserGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_groups_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `user_groups_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/user_groups/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUserGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_groups_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the user group with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutUserGroup body: The new values of the user_group (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetUserGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_groups_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.user_groups_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def user_groups_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the user group with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutUserGroup body: The new values of the user_group (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetUserGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_groups_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_groups_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `user_groups_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/user_groups/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUserGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_groups_post(self, body, **kwargs):  # noqa: E501
        """Add a new user group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostUserGroups body: The details of the user_groups (required)
        :param str accept_language: Language header
        :return: GetUserGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_groups_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_groups_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_groups_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new user group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostUserGroups body: The details of the user_groups (required)
        :param str accept_language: Language header
        :return: GetUserGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_groups_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_groups_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/user_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUserGroups',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_groups_user_group_guid_permissions_get(self, user_group_guid, **kwargs):  # noqa: E501
        """Retrieve the list of permissions of the user group with the specified group GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_user_group_guid_permissions_get(user_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_group_guid: The user_group_guid to search for (required)
        :param str accept_language: Language header
        :return: list[GetUserGroupPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_groups_user_group_guid_permissions_get_with_http_info(user_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.user_groups_user_group_guid_permissions_get_with_http_info(user_group_guid, **kwargs)  # noqa: E501
            return data

    def user_groups_user_group_guid_permissions_get_with_http_info(self, user_group_guid, **kwargs):  # noqa: E501
        """Retrieve the list of permissions of the user group with the specified group GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_user_group_guid_permissions_get_with_http_info(user_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_group_guid: The user_group_guid to search for (required)
        :param str accept_language: Language header
        :return: list[GetUserGroupPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_group_guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_groups_user_group_guid_permissions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_group_guid' is set
        if ('user_group_guid' not in params or
                params['user_group_guid'] is None):
            raise ValueError("Missing the required parameter `user_group_guid` when calling `user_groups_user_group_guid_permissions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_group_guid' in params:
            path_params['user_group_guid'] = params['user_group_guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/user_groups/{user_group_guid}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetUserGroupPermission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_groups_user_group_guid_permissions_post(self, body, user_group_guid, **kwargs):  # noqa: E501
        """Add a new permission to the group with the specified group GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_user_group_guid_permissions_post(body, user_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostUserGroupPermission body: The details of the user_group_permission (required)
        :param str user_group_guid: The user_group_guid to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetUserGroupPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_groups_user_group_guid_permissions_post_with_http_info(body, user_group_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.user_groups_user_group_guid_permissions_post_with_http_info(body, user_group_guid, **kwargs)  # noqa: E501
            return data

    def user_groups_user_group_guid_permissions_post_with_http_info(self, body, user_group_guid, **kwargs):  # noqa: E501
        """Add a new permission to the group with the specified group GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_groups_user_group_guid_permissions_post_with_http_info(body, user_group_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostUserGroupPermission body: The details of the user_group_permission (required)
        :param str user_group_guid: The user_group_guid to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetUserGroupPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_group_guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_groups_user_group_guid_permissions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_groups_user_group_guid_permissions_post`")  # noqa: E501
        # verify the required parameter 'user_group_guid' is set
        if ('user_group_guid' not in params or
                params['user_group_guid'] is None):
            raise ValueError("Missing the required parameter `user_group_guid` when calling `user_groups_user_group_guid_permissions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_group_guid' in params:
            path_params['user_group_guid'] = params['user_group_guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/user_groups/{user_group_guid}/permissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUserGroupPermission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_auth_delete(self, **kwargs):  # noqa: E501
        """Logout user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_auth_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_auth_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_auth_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_auth_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Logout user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_auth_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_auth_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/users/auth', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_auth_post(self, body, **kwargs):  # noqa: E501
        """Login with user credentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_auth_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostUsersAuth body: The details of the users_auth (required)
        :param str accept_language: Language header
        :return: GetUsersAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_auth_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_auth_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def users_auth_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Login with user credentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_auth_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostUsersAuth body: The details of the users_auth (required)
        :param str accept_language: Language header
        :return: GetUsersAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_auth_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `users_auth_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/users/auth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUsersAuth',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetUsers]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetUsers]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetUsers]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Erase the user with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.users_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def users_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Erase the user with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `users_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/users/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the user with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.users_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def users_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the user with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `users_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/users/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_guid_put(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the user with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_guid_put(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutUser body: The new values of the user (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.users_guid_put_with_http_info(body, guid, **kwargs)  # noqa: E501
            return data

    def users_guid_put_with_http_info(self, body, guid, **kwargs):  # noqa: E501
        """Modify the values of the user with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_guid_put_with_http_info(body, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutUser body: The new values of the user (required)
        :param str guid: The guid to modify (required)
        :param str accept_language: Language header
        :return: GetUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `users_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `users_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/users/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_me_get(self, **kwargs):  # noqa: E501
        """Retrieve the details about the user currently authorized in the API  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_me_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetMe]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_me_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_me_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_me_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the details about the user currently authorized in the API  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_me_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetMe]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_me_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/users/me', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMe]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_me_permissions_get(self, **kwargs):  # noqa: E501
        """Retrieve the permission of the user currently authorized in the API  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_me_permissions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetUserMePermissions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_me_permissions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_me_permissions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_me_permissions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the permission of the user currently authorized in the API  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_me_permissions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetUserMePermissions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_me_permissions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/users/me/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetUserMePermissions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_me_put(self, body, **kwargs):  # noqa: E501
        """Modify the values of the user currently authorized in the API  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_me_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutMe body: The new values of the me (required)
        :param str accept_language: Language header
        :return: GetMe
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_me_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_me_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def users_me_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """Modify the values of the user currently authorized in the API  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_me_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutMe body: The new values of the me (required)
        :param str accept_language: Language header
        :return: GetMe
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_me_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `users_me_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/users/me', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMe',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_post(self, body, **kwargs):  # noqa: E501
        """Add a new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostUsers body: The details of the users (required)
        :param str accept_language: Language header
        :return: GetUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def users_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostUsers body: The details of the users (required)
        :param str accept_language: Language header
        :return: GetUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `users_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUsers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wifi_connections_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of WiFi networks already configured  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_connections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetWifiConnections]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wifi_connections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wifi_connections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def wifi_connections_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of WiFi networks already configured  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_connections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetWifiConnections]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wifi_connections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/wifi/connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetWifiConnections]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wifi_connections_post(self, body, **kwargs):  # noqa: E501
        """Add a new WiFi network configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_connections_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostWifiConnections body: The details of the wifi_connections (required)
        :param str accept_language: Language header
        :return: GetWifiConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wifi_connections_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.wifi_connections_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def wifi_connections_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new WiFi network configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_connections_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostWifiConnections body: The details of the wifi_connections (required)
        :param str accept_language: Language header
        :return: GetWifiConnections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wifi_connections_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `wifi_connections_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/wifi/connections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWifiConnections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wifi_connections_uuid_delete(self, uuid, **kwargs):  # noqa: E501
        """Erase the WiFi network configuration with the specified UUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_connections_uuid_delete(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wifi_connections_uuid_delete_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.wifi_connections_uuid_delete_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def wifi_connections_uuid_delete_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Erase the WiFi network configuration with the specified UUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_connections_uuid_delete_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid to delete (required)
        :param str accept_language: Language header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wifi_connections_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `wifi_connections_uuid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/wifi/connections/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wifi_connections_uuid_get(self, uuid, **kwargs):  # noqa: E501
        """Retrieve the details about the WiFi network configuration with the specified UUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_connections_uuid_get(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid to search for (required)
        :param str accept_language: Language header
        :return: GetWifiConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wifi_connections_uuid_get_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.wifi_connections_uuid_get_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def wifi_connections_uuid_get_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Retrieve the details about the WiFi network configuration with the specified UUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_connections_uuid_get_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid to search for (required)
        :param str accept_language: Language header
        :return: GetWifiConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wifi_connections_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `wifi_connections_uuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/wifi/connections/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWifiConnection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wifi_connections_uuid_post(self, body, uuid, **kwargs):  # noqa: E501
        """Connect to the network with the specified UUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_connections_uuid_post(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostWifiConnection body: The details of the wifi_connection (required)
        :param str uuid: The uuid to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetWifiConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wifi_connections_uuid_post_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.wifi_connections_uuid_post_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def wifi_connections_uuid_post_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Connect to the network with the specified UUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_connections_uuid_post_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostWifiConnection body: The details of the wifi_connection (required)
        :param str uuid: The uuid to add the new resource to (required)
        :param str accept_language: Language header
        :return: GetWifiConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wifi_connections_uuid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `wifi_connections_uuid_post`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `wifi_connections_uuid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/wifi/connections/{uuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWifiConnection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wifi_get(self, **kwargs):  # noqa: E501
        """Retrieve the URLs to the 3 WiFi related endpoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetWifi
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wifi_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wifi_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def wifi_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the URLs to the 3 WiFi related endpoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetWifi
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wifi_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/wifi', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWifi',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wifi_networks_get(self, **kwargs):  # noqa: E501
        """Retrieve the list of WiFi networks available for the robot to connect  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_networks_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetWifiNetworks]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wifi_networks_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wifi_networks_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def wifi_networks_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of WiFi networks available for the robot to connect  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_networks_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: list[GetWifiNetworks]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wifi_networks_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/wifi/networks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetWifiNetworks]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wifi_networks_guid_get(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the WiFi network with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_networks_guid_get(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetWifiNetwork
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wifi_networks_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.wifi_networks_guid_get_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def wifi_networks_guid_get_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve the details about the WiFi network with the specified GUID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wifi_networks_guid_get_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: The guid to search for (required)
        :param str accept_language: Language header
        :return: GetWifiNetwork
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wifi_networks_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `wifi_networks_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/wifi/networks/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWifiNetwork',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def world_model_get(self, **kwargs):  # noqa: E501
        """Retrieve the information about the needed resources from the robot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.world_model_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetWorldModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.world_model_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.world_model_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def world_model_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the information about the needed resources from the robot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.world_model_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language header
        :return: GetWorldModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method world_model_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/world_model', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWorldModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def world_model_post(self, body, **kwargs):  # noqa: E501
        """Upload the world model with the existing robots, resources and positions and their respective locks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.world_model_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostWorldModel body: The details of the world_model (required)
        :param str accept_language: Language header
        :return: GetWorldModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.world_model_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.world_model_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def world_model_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Upload the world model with the existing robots, resources and positions and their respective locks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.world_model_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostWorldModel body: The details of the world_model (required)
        :param str accept_language: Language header
        :return: GetWorldModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method world_model_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `world_model_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['mir']  # noqa: E501

        return self.api_client.call_api(
            '/world_model', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWorldModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
